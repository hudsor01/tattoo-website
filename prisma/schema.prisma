generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id                 String        @id
  bookingId          Int?          @unique
  title              String
  description        String?
  startDate          DateTime
  endDate            DateTime
  status             String
  deposit            Float?
  totalPrice         Float?
  designNotes        String?
  followUpDate       DateTime?
  location           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  customerId         String
  artistId           String
  calendarEventId    String?
  calendarSyncStatus String?
  lastSyncedAt       DateTime?
  syncError          String?
  Artist             Artist        @relation(fields: [artistId], references: [id])
  Booking            Booking?      @relation(fields: [bookingId], references: [id])
  Customer           Customer      @relation(fields: [customerId], references: [id])
  Interaction        Interaction[]
  Transaction        Transaction[]
}

model Booking {
  id              Int          @id @default(autoincrement())
  name            String
  email           String
  phone           String
  tattooType      String
  size            String
  placement       String
  description     String
  preferredDate   DateTime
  preferredTime   String
  paymentMethod   String
  depositPaid     Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  customerId      String?
  artistId        String?
  notes           String?
  // Cal.com integration fields
  calBookingUid   String?      @unique
  calEventTypeId  Int?
  calStatus       String?
  calMeetingUrl   String?
  calMetadata     Json?
  calLastSyncedAt DateTime?
  source          String?      @default("website")
  Appointment     Appointment?
  Artist          Artist?      @relation(fields: [artistId], references: [id])
  Customer        Customer?    @relation(fields: [customerId], references: [id])
  Payment         Payment?
  
  @@index([calBookingUid])
  @@index([calStatus])
  @@index([source])
}

model Customer {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  email        String?        @unique
  phone        String?
  avatarUrl    String?
  address      String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  birthDate    DateTime?
  notes        String?
  allergies    String?
  source       String?
  tags         String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Appointment  Appointment[]
  Booking      Booking[]
  Contact      Contact[]
  Interaction  Interaction[]
  Lead         Lead[]
  TattooDesign TattooDesign[]
  Testimonial  Testimonial[]
  Transaction  Transaction[]
  Tag          Tag[]          @relation("CustomerToTag")

  @@index([createdAt])
  @@index([email])
  @@index([firstName])
  @@index([firstName, lastName])
  @@index([lastName])
  @@index([phone])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("admin")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Artist        Artist?
  Session       Session[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  bookingId     Int      @unique
  amount        Float
  paymentMethod String
  status        String
  transactionId String?
  customerEmail String
  customerName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Booking       Booking  @relation(fields: [bookingId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Artist {
  id                  String         @id
  userId              String         @unique
  specialty           String?
  bio                 String?
  portfolio           String?
  availableForBooking Boolean        @default(true)
  hourlyRate          Float?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime
  Appointment         Appointment[]
  User                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Booking             Booking[]
  TattooDesign        TattooDesign[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AutomationRun {
  id                String           @id
  automation_id     String?
  start_time        DateTime
  end_time          DateTime?
  status            String
  duration_ms       Int?
  success_count     Int?             @default(0)
  failure_count     Int?             @default(0)
  total_automations Int?             @default(0)
  created_at        DateTime         @default(now())
  EmailAutomation   EmailAutomation? @relation(fields: [automation_id], references: [id])
  EmailLog          EmailLog[]

  @@index([start_time])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Contact {
  id         Int       @id @default(autoincrement())
  name       String
  email      String
  subject    String?
  message    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  customerId String?
  Customer   Customer? @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EmailAutomation {
  id                 String          @id
  name               String
  description        String?
  active             Boolean         @default(true)
  template_id        String
  trigger_type       String
  trigger_field      String?
  trigger_value      String?
  trigger_comparison String?
  delay_minutes      Int?
  send_to_client     Boolean         @default(true)
  send_to_artist     Boolean         @default(false)
  schedule_type      String?
  schedule_config    Json?           @default("{}")
  last_run           DateTime?
  last_run_status    String?
  next_run           DateTime?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())
  created_by         String?
  updated_by         String?
  AutomationRun      AutomationRun[]
  EmailLog           EmailLog[]

  @@index([active])
  @@index([next_run])
  @@index([trigger_type])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EmailLog {
  id                String           @id
  recipient         String
  template_id       String
  data              Json?
  status            String
  message_id        String?
  error_message     String?
  sent_at           DateTime         @default(now())
  automation_id     String?
  automation_run_id String?
  EmailAutomation   EmailAutomation? @relation(fields: [automation_id], references: [id])
  AutomationRun     AutomationRun?   @relation(fields: [automation_run_id], references: [id])

  @@index([automation_id])
  @@index([automation_run_id])
  @@index([sent_at])
}


/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Interaction {
  id            String       @id
  type          String
  subject       String?
  content       String?
  direction     String
  outcome       String?
  scheduledAt   DateTime?
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  customerId    String
  appointmentId String?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  Customer      Customer     @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lead {
  id             Int       @id @default(autoincrement())
  name           String
  email          String
  leadMagnetType String
  downloadDate   DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  customerId     String?
  Customer       Customer? @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Tag {
  id        String     @id
  name      String     @unique
  color     String     @default("gray")
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  Customer  Customer[] @relation("CustomerToTag")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TattooDesign {
  id           String    @id
  name         String
  description  String?
  fileUrl      String?
  thumbnailUrl String?
  designType   String?
  size         String?
  isApproved   Boolean   @default(false)
  approvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  artistId     String
  customerId   String?
  Artist       Artist    @relation(fields: [artistId], references: [id])
  Customer     Customer? @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Testimonial {
  id          Int       @id @default(autoincrement())
  clientName  String
  clientImage String?
  tattooType  String?
  rating      Int       @default(5)
  comment     String
  featured    Boolean   @default(false)
  verified    Boolean   @default(true)
  publishedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  customerId  String?
  Customer    Customer? @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Transaction {
  id            String       @id
  amount        Float
  currency      String       @default("USD")
  status        String
  paymentMethod String
  transactionId String?
  receiptUrl    String?
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  customerId    String
  appointmentId String?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  Customer      Customer     @relation(fields: [customerId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NotificationQueue {
  id            String    @id @default(uuid())
  recipientId   String
  recipientType String
  title         String
  message       String
  notificationType String
  isRead        Boolean   @default(false)
  isProcessed   Boolean   @default(false)
  processedAt   DateTime?
  errorMessage  String?
  actionUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum action_type {
  email
  sms
  notification
  webhook
}

enum appointment_status {
  scheduled
  confirmed
  completed
  cancelled
  no_show
}

enum design_status {
  draft
  pending_approval
  approved
  rejected
}

enum interaction_direction {
  inbound
  outbound
  internal
}

enum interaction_type {
  email
  phone
  in_person
  note
  message
}

enum payment_method {
  cash
  card
  venmo
  cashapp
  paypal
  other
}

enum payment_status {
  verified
  pending
  failed
}

enum transaction_status {
  completed
  pending
  failed
}

enum trigger_type {
  appointment
  appointment_status_change
  client_created
  client_updated
  payment_received
  custom_date
  manual
}

enum user_role {
  admin
  superadmin
  user
  artist
  client
}

enum workflow_status {
  success
  failed
  pending
}