datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Uncommented - ready for direct PostgreSQL URL
}

generator client {
  provider = "prisma-client-js"
  output   = "../output/generated/prisma-client"
}

// ============================================================================
// SIMPLIFIED SCHEMA - ONLY ESSENTIAL MODELS FOR TATTOO WEBSITE
// ============================================================================

// User management (admin authentication via Better Auth)
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("user")
  phone         String?
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?

  // Better Auth relationships
  accounts Account[]
  sessions Session[]

  @@index([email])
  @@index([role])
  @@index([emailVerified])
  @@map("user")
}

// Better Auth session management
model Session {
  id             String   @id @default(uuid())
  userId         String
  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("session")
}

// Better Auth account management (OAuth providers)
model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@index([providerId])
  @@map("account")
}

// Email verification for Better Auth
model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@index([expiresAt])
  @@map("verification")
}

// Rate limiting for API endpoints
model RateLimit {
  id          String   @id @default(uuid())
  key         String   @unique
  count       Int
  lastRequest BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([lastRequest])
  @@index([key, lastRequest]) // Rate limiting performance optimization
  @@map("rateLimit")
}

// Customer contact information (simplified)
model Customer {
  id         String    @id @default(uuid())
  firstName  String
  lastName   String
  email      String?   @unique
  phone      String?
  address    String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  birthDate  DateTime?
  allergies  String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  bookings      Booking[]
  tattooDesigns TattooDesign[]

  @@index([email])
  @@index([phone])
  @@index([firstName, lastName])
  @@index([firstName, lastName, email]) // Customer search optimization
  @@index([createdAt, firstName, lastName]) // Admin dashboard recent customers
  @@map("customer")
}

// Unified booking model (combines Booking + CalBooking)
model Booking {
  id String @id @default(uuid())

  // Customer details
  customerId String?
  firstName  String
  lastName   String
  email      String
  phone      String?

  // Tattoo details
  tattooType  String
  size        String?
  placement   String?
  description String?

  // Scheduling
  preferredDate DateTime
  preferredTime String?
  status        BookingStatus @default(PENDING)

  // Cal.com integration
  calBookingUid  String? @unique
  calEventTypeId Int?
  calStatus      String?
  calMeetingUrl  String?

  // Additional info
  source        String  @default("website")
  notes         String?
  paymentMethod String?
  totalAmount   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customer Customer? @relation(fields: [customerId], references: [id])
  payments Payment[]

  @@index([email])
  @@index([status])
  @@index([preferredDate])
  @@index([calBookingUid])
  @@index([createdAt])
  @@index([status, preferredDate]) // Dashboard appointment filtering
  @@index([createdAt, status]) // Analytics date ranges with status
  @@index([email, status]) // Customer search with status
  @@index([customerId, preferredDate]) // Customer appointment history
  @@index([preferredDate, status]) // Scheduling and availability
  @@index([customerId, status, createdAt]) // Customer relationship queries
  @@map("booking")
}

// Tattoo portfolio/gallery
model TattooDesign {
  id           String  @id @default(uuid())
  name         String
  description  String?
  fileUrl      String // Vercel Blob URL
  thumbnailUrl String? // Optimized version
  designType   String? // traditional, japanese, realism, etc.
  size         String? // small, medium, large, sleeve
  isApproved   Boolean @default(false)

  // Artist info (simplified)
  artistId   String @default("fernando-govea")
  artistName String @default("Fernando Govea")

  // Customer association (if custom design)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isApproved])
  @@index([designType])
  @@index([artistId])
  @@index([createdAt])
  @@index([isApproved, createdAt]) // Public gallery ordering
  @@index([designType, isApproved, createdAt]) // Category filtering with approval
  @@index([artistId, isApproved, createdAt]) // Artist portfolio queries
  @@index([isApproved, designType]) // Gallery filtering optimization
  @@map("tattoo_design")
}

// Contact form submissions
model Contact {
  id         String        @id @default(uuid())
  name       String
  email      String
  phone      String?
  message    String
  status     ContactStatus @default(NEW)
  adminNotes String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("contact")
}

// ============================================================================
// CAL.COM ANALYTICS MODELS
// ============================================================================

// Analytics events tracking
model CalAnalyticsEvent {
  id         String   @id @default(uuid())
  sessionId  String
  eventType  String
  eventName  String
  userId     String?
  serviceId  String?
  bookingId  Int?
  properties Json?
  userAgent  String?
  ipAddress  String?
  referrer   String?
  url        String?
  duration   Int?
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([sessionId])
  @@index([eventType])
  @@index([userId])
  @@index([serviceId])
  @@index([timestamp])
  @@index([timestamp, eventType]) // Event tracking queries
  @@index([sessionId, timestamp]) // Session-based analytics
  @@index([eventType, serviceId, timestamp]) // Service performance tracking
  @@map("cal_analytics_event")
}

// Booking funnel tracking
model CalBookingFunnel {
  id           String   @id @default(uuid())
  sessionId    String
  step         String
  stepOrder    Int
  serviceId    String?
  userId       String?
  completed    Boolean  @default(false)
  abandoned    Boolean  @default(false)
  timeSpent    Int?
  errorMessage String?
  timestamp    DateTime @default(now())

  @@index([sessionId])
  @@index([step])
  @@index([completed])
  @@index([abandoned])
  @@index([timestamp])
  @@index([sessionId, stepOrder]) // Funnel flow tracking
  @@index([completed, step, timestamp]) // Conversion analysis
  @@index([step, completed, timestamp]) // Step completion rates
  @@map("cal_booking_funnel")
}

// Service analytics aggregated daily
model CalServiceAnalytics {
  id             String   @id @default(uuid())
  serviceId      String
  serviceName    String
  eventType      String
  date           DateTime
  count          Int      @default(0)
  totalRevenue   Float?
  avgBookingTime Float?
  conversionRate Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([serviceId, eventType, date])
  @@index([serviceId])
  @@index([date])
  @@index([eventType])
  @@index([date, serviceId, eventType]) // Daily service performance queries
  @@index([serviceId, date]) // Service historical data
  @@map("cal_service_analytics")
}

// Real-time metrics snapshot
model CalRealtimeMetrics {
  id                String   @id @default(uuid())
  liveVisitors      Int      @default(0)
  activeSessions    Int      @default(0)
  todayBookings     Int      @default(0)
  todayRevenue      Float    @default(0)
  pendingBookings   Int      @default(0)
  confirmedBookings Int      @default(0)
  cancelledBookings Int      @default(0)
  conversionRate    Float    @default(0)
  topServiceId      String?
  avgResponseTime   Int      @default(0)
  errorRate         Float    @default(0)
  systemLoad        Float    @default(0)
  timestamp         DateTime @default(now())

  @@index([timestamp])
  @@map("cal_realtime_metrics")
}

// Payment tracking (simplified)
model Payment {
  id            String        @id @default(uuid())
  bookingId     String?
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  stripeId      String?       @unique
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  booking Booking? @relation(fields: [bookingId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([bookingId])
  @@index([status, createdAt]) // Payment analytics and filtering
  @@index([bookingId, status]) // Booking payment tracking
  @@index([createdAt, status]) // Financial reporting date ranges
  @@map("payment")
}

// ============================================================================
// ENUMS
// ============================================================================

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW

  @@map("booking_status")
}

enum ContactStatus {
  NEW
  READ
  REPLIED
  RESOLVED

  @@map("contact_status")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
}
