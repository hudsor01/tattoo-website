📁 FILE TREE:
.
./.vercel
./prisma
./prisma/migrations
./prisma/migrations/20250602202935_add_settings_models
./prisma/migrations/20250531034737_better_auth_integration
./output
./.claude
./docs
./.next
./.next/types
./.next/cache
./.next/cache/images
./.next/cache/swc
./.next/cache/webpack
./.next/server
./.next/static
./.next/static/development
./.next/static/chunks
./supabase
./supabase/migrations
./supabase/.temp
./public
./public/images
./public/videos
./public/icons
./public/icons/splash
./public/icons/windows11
./public/icons/ios
./public/icons/android
./scripts
./playwright-report
./playwright-report/data
./.vscode
./src
./src/types
./src/app
./src/app/contact
./src/app/booking
./src/app/faq
./src/app/gallery
./src/app/admin
./src/app/unauthorized
./src/app/about
./src/app/api
./src/app/services
./src/providers
./src/styles
./src/components
./src/components/blocks
./src/components/ui
./src/components/home
./src/components/contact
./src/components/booking
./src/components/faq
./src/components/gallery
./src/components/providers
./src/components/admin
./src/components/charts
./src/components/cal
./src/components/layouts
./src/components/icons
./src/components/pwa
./src/components/performance
./src/components/seo
./src/components/error
./src/components/services
./src/components/analytics
./src/components/debug
./src/hooks
./src/lib
./src/lib/security
./src/lib/auth
./src/lib/trpc
./src/lib/constants
./src/lib/gallery
./src/lib/toast
./src/lib/utils
./src/lib/schemas
./src/lib/cal
./src/lib/supabase
./src/lib/dashboard
./src/lib/pwa
./src/lib/actions
./src/lib/db
./src/lib/seo
./src/lib/error
./src/lib/pricing
./src/lib/email
./src/lib/services
./src/lib/validation
./src/lib/analytics
./src/data

📄 KEY APP FILES:
==> src/app/robots.ts <==
import type { MetadataRoute } from 'next';
import { ENV } from '@/lib/utils/env';

export default function robots(): MetadataRoute.Robots {
  const baseUrl = typeof ENV.NEXT_PUBLIC_APP_URL === 'string' ? ENV.NEXT_PUBLIC_APP_URL : 'https://ink37tattoos.com';

  return {
    rules: [
      {
        userAgent: '*',
        allow: '/',
        disallow: [
          '/api/',
          '/admin/',
          '/client-portal/',
          '/auth/',
          '/account/',
          '/_next/',
          '/static/',
          '/server/',

==> src/app/contact/metadata.ts <==
import type { Metadata } from 'next';
import { generatePageMetadata } from '@/lib/seo/seo-config';

export const metadata: Metadata = generatePageMetadata({
  title: 'Contact | Book Your Tattoo Consultation Today',
  description: 'Contact our professional tattoo artist in Dallas/Fort Worth, Texas for consultations, custom designs, and bookings. Serving Dallas-Fort Worth area with expert tattoo services and personalized artwork.',
  keywords: [
    'contact tattoo artist Crowley TX',
    'tattoo consultation DFW',
    'book tattoo appointment',
    'tattoo inquiry',
    'custom tattoo quote',
    'custom tattoo design',
    'custom tattoo contact',
    'professional tattoo artist contact',
    'Dallas Fort Worth tattoo booking'
  ],
  canonical: 'https://ink37tattoos.com/contact',
  ogImage: '/images/realism.jpg',
});

==> src/app/contact/page.tsx <==
import type { Metadata } from 'next';
import ContactClient from '@/components/contact/ContactClient';

// Enable static generation with revalidation every 24 hours
export const revalidate = 86400;

export const metadata: Metadata = {
  title: 'Contact | Ink 37 Tattoos',
  description:
    'Get in touch with Ink 37 Tattoos for consultations, questions, or to book your next tattoo session. Located in the Dallas/Fort Worth area.',
  keywords: [
    'tattoo contact',
    'tattoo consultation',
    'Dallas tattoo',
    'Fort Worth tattoo',
    'Ink 37 Tattoos',
  ],
  openGraph: {
    title: 'Contact Ink 37 Tattoos',
    description:

==> src/app/booking/booking-client.tsx <==
/**
 * Booking Client Component
 * 
 * This component uses the unified Cal.com booking system that provides:
 * - Service selection and management
 * - Simple Cal.com iframe integration
 * - Responsive design for all devices
 * 
 * The CalBookingUnified component handles all Cal.com iframe integration,
 * allowing this component to focus on the page layout and contact fallback.
 */
'use client';

import { Button } from '@/components/ui/button';
import './booking.css';
import Footer from '@/components/layouts/Footer';
import { useState } from 'react';
import { CalBookingUnified } from '@/components/booking/cal-booking';
import type { Prisma, CalEventType } from '@prisma/client';


==> src/app/booking/loading.tsx <==
/**
 * Booking page loading state
 * Uses form loading component for consistency
 */
import { LoadingUI } from '@/components/admin/layout/Loading';

export default function BookingLoading() {
  return (
    <div className="container max-w-4xl mx-auto py-12 px-4">
      <LoadingUI type="form" />
    </div>
  );
}

==> src/app/booking/page.tsx <==
/**
 * Booking Page - Cal.com Integration
 * 
 * Purpose: Main booking page using Cal.com Atoms for scheduling
 * Rendering: SSG for SEO with CSR hydration for booking functionality
 * Dependencies: Cal.com Atoms, metadata for SEO
 * 
 * Trade-offs:
 * - SSG vs SSR: SEO optimization vs dynamic content
 * - Cal.com integration vs custom forms: Professional scheduling vs full control
 * - Dynamic import vs static: Performance vs simplicity
 */

import type { Metadata } from 'next';
import { Suspense } from 'react';
import { CalAtomsBooking } from '@/components/cal/cal-atoms-booking';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Clock, MapPin, Phone, Mail } from 'lucide-react';


==> src/app/faq/page-server.tsx <==
import type { Metadata } from 'next';
import nextDynamic from 'next/dynamic';

// Force static generation
export const dynamic = 'force-static';
export const revalidate = 86400; // 24 hours

export const metadata: Metadata = {
  title: 'FAQ | Ink 37 Tattoos',
  description:
    'Frequently asked questions about getting a tattoo at Ink 37. Learn about our process, policies, pricing, and aftercare.',
  keywords: [
    'tattoo FAQ',
    'tattoo questions',
    'Ink 37 Tattoos',
    'Dallas tattoo',
    'Fort Worth tattoo',
  ],
};


==> src/app/faq/layout.tsx <==
import { metadata } from './metadata';

export { metadata };

export default function FAQLayout({ children }: { children: React.ReactNode }) {
  return <>{children}</>;
}

==> src/app/faq/metadata.ts <==
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'FAQ | Frequently Asked Questions - Ink 37 Tattoos',
  description:
    'Find answers to common questions about tattoo care, booking process, pricing, and what to expect during your tattoo session.',
  keywords:
    'tattoo faq, tattoo care, tattoo booking process, tattoo pricing, tattoo aftercare, tattoo questions',
  openGraph: {
    title: 'Tattoo FAQ - Ink 37 Tattoos',
    description:
      'Common questions about tattoo care, booking, pricing, and the tattoo process answered.',
    url: '/faq',
    siteName: 'Ink 37 Tattoos',
    images: [
      {
        url: '/images/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'Ink 37 Tattoos FAQ',

==> src/app/faq/page.tsx <==
import React from 'react';
import type { Metadata } from 'next';
import FAQClient from '@/components/faq/FAQClient';

// Force static generation
export const dynamic = 'force-static';
export const revalidate = 86400; // 24 hours

export const metadata: Metadata = {
  title: 'FAQ | Ink 37 Tattoos',
  description:
    'Find answers to frequently asked questions about tattoo services, consultations, pricing, aftercare, and policies at Ink 37 Tattoos.',
  keywords: [
    'tattoo FAQ',
    'tattoo questions',
    'tattoo consultation',
    'tattoo aftercare',
    'Dallas tattoo',
    'Fort Worth tattoo',
  ],

==> src/app/gallery/layout.tsx <==
import type React from 'react';
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Tattoo Gallery',
  description: 'A modern tattoo gallery showcasing our portfolio and process videos',
};

export default function GalleryLayout({ children }: { children: React.ReactNode }) {
  return <div className="min-h-screen bg-background">{children}</div>;
}

==> src/app/gallery/error.tsx <==
'use client';

import { ErrorHandler } from '@/components/error/error-boundary';

export default function GalleryError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return <ErrorHandler error={error} reset={reset} variant="gallery" />;
}

==> src/app/gallery/metadata.ts <==
import type { Metadata } from 'next';
import { generatePageMetadata } from '@/lib/seo/seo-config';

export const metadata: Metadata = generatePageMetadata({
  title: 'Tattoo Gallery | Custom Tattoo Designs & Artwork',
  description: 'Explore our professional tattoo gallery featuring custom designs, cover-ups, traditional, realism, and Japanese style tattoos. See quality artwork from our Crowley, TX tattoos.',
  keywords: [
    'tattoo gallery',
    'custom tattoo designs',
    'tattoo artwork',
    'cover up tattoos',
    'traditional tattoos',
    'realism tattoos',
    'japanese tattoos',
    'tattoo portfolio',
    'Crowley TX tattoo work',
    'DFW tattoo gallery'
  ],
  canonical: 'https://ink37tattoos.com/gallery',
  ogImage: '/images/japanese.jpg',

==> src/app/gallery/[id]/page.tsx <==
/**
 * Gallery Design Detail Page
 *
 * Real implementation that fetches tattoo design data directly from the database
 * using Prisma and displays detailed information about a specific design.
 */
import { Suspense } from 'react';
import { notFound } from 'next/navigation';
import { Image as ImageIcon } from 'lucide-react';
import { prisma } from '@/lib/db/prisma';
import { logger } from "@/lib/logger";
import {
  getBuildSafeTattooDesigns,
  getBuildSafeTattooDesign,
  getFallbackGalleryMetadata,
} from '@/lib/db/build-safe-prisma';
import { DesignDetail } from '@/components/gallery/DesignDetail';
import { DesignDetailSkeleton } from '@/components/gallery/DesignDetailSkeleton';
import type { Metadata } from 'next';
// Page props type for Next.js dynamic pages

==> src/app/gallery/page.tsx <==
import type { Metadata } from 'next';
import { Suspense } from 'react';
import GalleryClient from '@/components/gallery/GalleryClient';
import { GallerySkeleton } from '@/components/gallery/GallerySkeleton';

// Enable Partial Prerendering (PPR) for optimal performance
export const experimental_ppr = true;

// Static parts will be prerendered, dynamic parts will stream
export const dynamic = 'auto';

export const metadata: Metadata = {
  title: 'Gallery | Ink 37 Tattoos',
  description:
    "Explore our tattoo gallery showcasing Ink 37 Tattoos' custom designs, Japanese style, traditional, and realism tattoos. Get inspired for your next ink.",
  keywords: [
    'tattoo gallery',
    'custom tattoos',
    'Ink 37 Tattoos',
    'Dallas tattoo',

==> src/app/gallery/not-found.tsx <==
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Images } from 'lucide-react';

export default function GalleryNotFound() {
  return (
    <div className="min-h-screen bg-black flex items-center justify-center px-4">
      <div className="text-center max-w-md mx-auto">
        <div className="text-6xl font-bold text-red-500 mb-4">404</div>
        <h1 className="text-2xl font-bold text-white mb-2">Design Not Found</h1>
        <p className="text-zinc-400 mb-6">
          The tattoo design you're looking for doesn't exist or has been removed from our gallery.
        </p>

        <div className="flex flex-col sm:flex-row gap-3 justify-center">
          <Button
            asChild
            variant="outline"
            className="border-zinc-700 text-white hover:bg-zinc-800"
          >

==> src/app/admin/customers/client.tsx <==
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/admin/layout/Sidebar';
import { useUser } from '@/lib/auth-client';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Bell, Users, UserPlus, Mail, Phone, Search, Filter } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';

==> src/app/admin/customers/page.tsx <==
import React from 'react';
import { CustomersPageClient } from './client';

export default function CustomersPage() {
  return <CustomersPageClient />;
}
==> src/app/admin/settings/page.tsx <==
import { Suspense } from 'react';
import AdminLoading from '../loading';

export default function SettingsPage() {
  return (
    <Suspense fallback={<AdminLoading />}>
    </Suspense>
  );
}
==> src/app/admin/payments/client.tsx <==
/**
 * Admin Payments Page Client Component
 * 
 * Purpose: Manage payments from Cal.com bookings
 * Rendering: CSR with payment data integration
 * Dependencies: Cal.com payment data, analytics
 * 
 * Trade-offs:
 * - Cal.com payment tracking vs custom payment system
 * - Real-time updates vs caching for performance
 */

'use client';

import { cn } from '@/lib/utils';
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';

==> src/app/admin/payments/page.tsx <==
import React from 'react';
import { PaymentsPageClient } from './client';

export default function PaymentsPage() {
  return <PaymentsPageClient />;
}
==> src/app/admin/layout.server.tsx <==
import type { Metadata } from 'next'

export function generateMetadata(): Metadata {
  return {
    title: 'Admin Access | Dashboard',
    description: 'Secure administrator authentication portal',
    robots: 'noindex, nofollow',
  }
}

export default function AdminLayoutServer({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      {children}
    </>
  )

==> src/app/admin/bookings/client.tsx <==
'use client';

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/admin/layout/Sidebar';
import { CalEmbed } from '@/components/booking/cal-embed';
import { trpc } from '@/lib/trpc/client';
import { format } from 'date-fns';
import { Calendar, Clock, User, DollarSign, RefreshCw, ExternalLink } from 'lucide-react';
import { DataTable } from '@/components/admin/Data-Table';
import { ColumnDef } from '@tanstack/react-table';
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';
import type { Prisma } from '@prisma/client';

// Admin booking display type using CalBooking with relations

==> src/app/admin/bookings/page.tsx <==
import React from 'react';
import { BookingsPageClient } from './client';

export default function BookingsPage() {
  return <BookingsPageClient />;
}
==> src/app/admin/appointments/client.tsx <==
/**
 * Admin Appointments Page Client Component
 * 
 * Purpose: View and manage individual appointments with detailed information
 * Rendering: CSR with real-time updates from Cal.com
 * Dependencies: Cal.com API, customer data integration
 * 
 * Trade-offs:
 * - Separate from bookings page for detailed view vs single page complexity
 * - Real-time updates vs API rate limits
 */

'use client';

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/admin/layout/Sidebar';

==> src/app/admin/appointments/page.tsx <==
import React from 'react';
import { AppointmentsPageClient } from './client';

export default function AppointmentsPage() {
  return <AppointmentsPageClient />;
}
==> src/app/admin/gallery/client.tsx <==
/**
 * Admin Gallery Management Client Component
 * 
 * Purpose: Client component for managing gallery images and portfolio
 * Rendering: CSR with image upload and management capabilities
 */

'use client';

import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/admin/layout/Sidebar';
import { trpc } from '@/lib/trpc/client';
import { 
  Image, 
  Upload, 
  Eye, 

==> src/app/admin/gallery/page.tsx <==
/**
 * Admin Gallery Management Page
 * 
 * Purpose: Manage gallery images, approve uploads, and organize tattoo portfolio
 * Rendering: CSR with real-time image management
 */

import { Metadata } from 'next';
import { GalleryPageClient } from './client';

export const metadata: Metadata = {
  title: 'Gallery Management | Admin Dashboard',
  description: 'Manage gallery images and tattoo portfolio',
};

export default function AdminGalleryPage() {
  return <GalleryPageClient />;
}
==> src/app/admin/projects/client.tsx <==
'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useUser } from '@/lib/auth-client';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Bell, Image, Upload, Folder, Grid } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

export function ProjectsPageClient() {
  const { user } = useUser();

  const projects = [
    { id: 1, title: 'Traditional Sleeve', client: 'John Doe', status: 'In Progress', date: '2024-06-10' },
    { id: 2, title: 'Japanese Dragon', client: 'Jane Smith', status: 'Completed', date: '2024-06-05' },
    { id: 3, title: 'Geometric Pattern', client: 'Mike Wilson', status: 'Planning', date: '2024-06-15' },
    { id: 4, title: 'Portrait Work', client: 'Sarah Johnson', status: 'In Progress', date: '2024-06-12' },
  ];


==> src/app/admin/projects/page.tsx <==
import React from 'react';
import { ProjectsPageClient } from './client';

export default function ProjectsPage() {
  return <ProjectsPageClient />;
}
==> src/app/admin/client-wrapper-new.tsx <==
/**
 * Admin Client Wrapper - Simplified after Dashboard Consolidation
 * 
 * Purpose: Simplified admin wrapper that delegates auth and error handling
 * to AdminDashboardClient for better consolidation.
 * 
 * Cleanup Phase: Dashboard Consolidation (Phase 1)
 * Date: June 2, 2025
 */

'use client';

import React from 'react';
import { ErrorBoundary } from '@/components/error/error-boundary';
import AdminDashboardClient from '@/components/admin/dashboard/Analytics-View';
import ClientHydration from '@/components/admin/auth/ClientHydration';
import { logger } from "@/lib/logger";

// Simplified hydration-safe loading component
function HydrationLoader() {

==> src/app/admin/client-wrapper.tsx <==
/**
 * Admin Client Wrapper - Simplified after Dashboard Consolidation
 * 
 * Purpose: Simplified admin wrapper that delegates auth and error handling
 * to AdminDashboardClient for better consolidation.
 * 
 * Cleanup Phase: Dashboard Consolidation (Phase 1)
 * Date: June 2, 2025
 */

'use client';

import React from 'react';
import { ErrorBoundary } from '@/components/error/error-boundary';
import AdminDashboardClient from '@/components/admin/dashboard/Analytics-View';
import ClientHydration from '@/components/admin/auth/ClientHydration';
import { logger } from "@/lib/logger";

// Simplified hydration-safe loading component
function HydrationLoader() {

==> src/app/admin/team/page.tsx <==

==> src/app/admin/layout.tsx <==
import React from 'react';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/admin/layout/Sidebar';

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        {children}
      </SidebarInset>
    </SidebarProvider>
  );
}
==> src/app/admin/error.tsx <==
'use client'

import { Button } from '@/components/ui/button'
import { AlertCircle, RefreshCw, Home } from 'lucide-react'
import Link from 'next/link'

export default function AdminErrorPage({ 
  error, 
  reset,
}: { 
  error: Error & { digest?: string }
  reset: () => void 
}) {
  return (
    <div className="min-h-screen bg-slate-950 flex items-center justify-center p-6">
      <div className="max-w-2xl mx-auto text-center">
        <div className="bg-slate-900/60 backdrop-blur-sm border border-slate-800/50 rounded-xl p-8 shadow-2xl">
          <div className="text-red-500 mb-6">
            <div className="mx-auto w-16 h-16 rounded-full bg-red-900/20 flex items-center justify-center">
              <AlertCircle className="h-8 w-8" />

==> src/app/admin/loading.tsx <==
import { Shield } from 'lucide-react'
import Image from 'next/image'
import { LoadingSpinner } from '@/components/ui/loading-spinner'

export default function AdminLoading() {
  return (
    <div className="min-h-screen bg-linear-to-br from-black via-gray-900 to-black overflow-hidden">
      <header className="relative z-10 p-6">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <div className="flex items-center space-x-3">
            <div className="h-8 w-8 bg-linear-to-r from-red-500 to-orange-500 rounded-lg flex items-center justify-center">
              <Shield className="h-5 w-5 text-white" />
            </div>
            <span className="text-xl font-semibold text-white">
              Ink 37 Admin
            </span>
          </div>
        </div>
      </header>


==> src/app/admin/documents/page.tsx <==

==> src/app/admin/metadata.ts <==
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Admin Dashboard | Ink 37 Tattoos',
  description: 'Secure administrator dashboard for custom tattoos management',
  robots: 'noindex, nofollow',
};

==> src/app/admin/page.tsx <==
import React from 'react'
import { ClientWrapper } from './client-wrapper'

export default function AdminDashboard() {
  return <ClientWrapper />
}

==> src/app/admin/analytics/client.tsx <==
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useUser } from '@/lib/auth-client';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Bell, TrendingUp, Users, DollarSign, Calendar } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { RevenueChart, DashboardCharts } from '@/components/admin/dashboard/Charts';

export function AnalyticsPageClient() {
  const { user } = useUser();

  return (
    <>
      {/* Fixed Header */}
      <header className="sticky top-0 z-40 flex items-center justify-between px-6 py-4 border-b border-border/40 bg-background/95 backdrop-blur-sm">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Analytics</h1>

==> src/app/admin/analytics/page.tsx <==
import React from 'react';
import { AnalyticsPageClient } from './client';

export default function AnalyticsPage() {
  return <AnalyticsPageClient />;
}
==> src/app/admin/debug/page.tsx <==
import React from 'react';

export default function DebugPage() {
  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Fixed Sidebar */}
      <div className="fixed inset-y-0 left-0 w-64 bg-red-500/20 border-r-4 border-red-500 z-50">
        <div className="p-4">
          <h2 className="text-xl font-bold">DEBUG: Sidebar</h2>
          <p>This should be fixed to the left</p>
          <p>Width: 16rem (256px)</p>
        </div>
      </div>
      
      {/* Main Content with margin */}
      <div className="ml-64 bg-blue-500/20 min-h-screen p-8">
        <h1 className="text-2xl font-bold mb-4">DEBUG: Main Content</h1>
        <p className="mb-4">This content should NOT be behind the sidebar.</p>
        <p className="mb-4">It has margin-left: 16rem (256px) to push it to the right of the sidebar.</p>
        

==> src/app/unauthorized/page.tsx <==
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Shield, ArrowLeft } from 'lucide-react';

export default function UnauthorizedPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-linear-to-br from-gray-50 to-gray-100 p-4">
      <Card className="w-full max-w-md text-center">
        <CardHeader>
          <div className="mx-auto h-12 w-12 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <Shield className="h-6 w-6 text-red-600" />
          </div>
          <CardTitle className="text-2xl font-bold text-gray-900">
            Access Denied
          </CardTitle>
          <CardDescription className="text-gray-600">
            You don't have permission to access this page. Admin privileges are required.
          </CardDescription>
        </CardHeader>

==> src/app/about/metadata.ts <==
import type { Metadata } from 'next';
import { generatePageMetadata } from '@/lib/seo/seo-config';

export const metadata: Metadata = generatePageMetadata({
  title: 'About Fernando Govea | Professional Tattoo Artist with 10+ Years Experience',
  description: 'Meet Fernando Govea, a professional tattoo artist with over 10 years of experience in custom tattoo design. Specializing in traditional, realism, and Japanese styles in Crowley, TX and the Dallas-Fort Worth metroplex.',
  keywords: [
    'Fernando Govea tattoo artist',
    'experienced tattoo artist Crowley TX',
    'professional tattoo artist bio',
    'Dallas Fort Worth tattoo artist',
    'custom tattoo specialist',
    '10+ years tattoo experience',
    'traditional tattoo artist',
    'realism tattoo specialist'
  ],
  canonical: 'https://ink37tattoos.com/about',
  ogImage: '/images/japanese.jpg',
});

==> src/app/about/page.tsx <==
import type { Metadata } from 'next';
import AboutClient from '@/components/AboutClient';

// Force static generation
export const dynamic = 'force-static';
export const revalidate = 86400; // 24 hours

export const metadata: Metadata = {
  title: 'About Us | Ink 37 Tattoos',
  description:
    'Learn about Ink 37 Tattoos, a custom tattoo artist\'s dream in Dallas/Fort Worth. Meet Fernando Govea, a passionate artist with over 10 years of experience.',
};

/**
 * About Page - Server Component that wraps the client component
 * This pattern separates server and client concerns for better performance
 * UpdateNote: AboutClient component will now use the SharedLayout for consistency
 */
export default function AboutPage() {
  return <AboutClient />;

==> src/app/sitemap.ts <==
import type { MetadataRoute } from 'next';
import { ENV } from '@/lib/utils/env';

export default function sitemap(): MetadataRoute.Sitemap {
  const baseUrl = typeof ENV.NEXT_PUBLIC_APP_URL === 'string' ? ENV.NEXT_PUBLIC_APP_URL : 'https://ink37tattoos.com';

  // Main pages with higher priority
  const mainPages = [
    {
      url: baseUrl as string,
      lastModified: new Date(),
      changeFrequency: 'daily' as const,
      priority: 1,
    },
    {
      url: `${baseUrl}/gallery`,
      lastModified: new Date(),
      changeFrequency: 'daily' as const,
      priority: 0.9,
    },

==> src/app/layout.tsx <==
import type { ReactNode } from 'react';
import type { Metadata } from 'next';
import { cookies } from 'next/headers';
import Script from 'next/script';
import { ENV } from '@/lib/utils/env';
import { inter, montserrat, pacifico, satisfy } from '../styles/fonts';
import { seoConfig, generateBusinessStructuredData } from '@/lib/seo/seo-config';
import Providers from './providers';
import NavigationSystem from '../components/layouts/NavigationSystem';

import './globals.css';

export const metadata: Metadata = {
  metadataBase: new URL(typeof seoConfig.siteUrl === 'string' ? seoConfig.siteUrl : 'https://ink37tattoos.com'),
  title: seoConfig.defaultTitle,
  description: seoConfig.defaultDescription,
  icons: {
    icon: [
      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },

==> src/app/error.tsx <==
'use client';

import { ErrorHandler } from '@/components/error/error-boundary';

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return <ErrorHandler error={error} reset={reset} variant="default" />;
}

==> src/app/api/customers/search/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';
import { verifyAdminAccess } from '@/lib/utils/server';
import { z } from 'zod';

import { logger } from "@/lib/logger";
const searchQuerySchema = z.object({
  q: z.string().min(1, 'Search query is required'),
  limit: z.coerce.number().min(1).max(50).default(10),
});

/**
 * GET /api/customers/search
 * Protected endpoint for searching customers (requires admin access)
 */
export async function GET(request: NextRequest) {
  try {
    // Verify admin access
    const hasAccess = await verifyAdminAccess();
    if (!hasAccess) {

==> src/app/api/contact/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { contactFormSchema } from '@/lib/validation-schemas';
import { prisma } from '@/lib/db/prisma';
import { sendEmail, generateSimpleAdminContactEmail, generateSimpleCustomerConfirmation } from '@/lib/email/email-service';
import { z } from 'zod';
import { sanitizeForPrisma } from '@/lib/utils/prisma-helper';
import { rateLimit, rateLimitResponse } from '@/lib/rate-limit';
import { getEnvSafe } from '@/lib/utils/env';

import { logger } from "@/lib/logger";
export const dynamic = 'force-dynamic';
// Increase the size limit for file uploads
export const config = {
  api: {
    bodyParser: false,
    responseLimit: '10mb',
  },

==> src/app/api/appointments/availability/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { logger } from "@/lib/logger";
import {
  checkAppointmentAvailability,
  calculateAppointmentDurationWithFallback,
} from '@/lib/db/functions';

/**
 * GET /api/appointments/availability
 *
 * Check if an artist is available for a specified time slot
 * Uses the PostgreSQL check_appointment_availability function
 */
export async function GET(request: NextRequest) {
  try {
    // Parse URL parameters
    const searchParams = request.nextUrl.searchParams;
    const artistId = searchParams.get('artistId');
    const startTime = searchParams.get('startTime');
    const endTime = searchParams.get('endTime');

==> src/app/api/auth/[...all]/route.ts <==
import { auth } from "@/lib/auth";
import { toNextJsHandler } from "better-auth/next-js";

export const { GET, POST } = toNextJsHandler(auth.handler);

==> src/app/api/trpc/[trpc]/route.ts <==
/**
 * tRPC API Route Handler
 *
 * This file serves as the entry point for tRPC API calls.
 * It handles all tRPC procedures through a single API endpoint.
 */
import { NextRequest } from 'next/server';
import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
import { appRouter } from '@/lib/trpc/app-router';
import { createTRPCContext } from '@/lib/trpc/context';
import { logger } from '@/lib/logger';

/**
 * Node.js runtime is more compatible with Zod and other dependencies
 * Edge runtime was causing bundling issues with Zod
 */
// export const runtime = 'edge';

/**
 * Handle all tRPC API calls

==> src/app/api/health/route.ts <==
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';
import { ENV } from '@/lib/utils/env';
// Health check types for API response
type HealthCheckResult = {
  status: 'pass' | 'fail' | 'warn';
  responseTime?: number;
  error?: string;
  details?: Record<string, unknown>;
};

type HealthCheck = {
  status: 'healthy' | 'degraded' | 'unhealthy';
  timestamp: string;
  version: string;
  environment: string;
  buildTime: string;
  uptime: number;
  checks: {
    database: HealthCheckResult;

==> src/app/api/admin/customers/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';
import { verifyAdminAccess } from '@/lib/utils/server';
import type { Prisma } from '@prisma/client';
import { logger } from "@/lib/logger";
/**
 * GET /api/admin/customers
 * Get all customers with optional filtering
 */
export async function GET(request: NextRequest) {
  try {
    // Verify admin access
    const hasAccess = await verifyAdminAccess();
    if (!hasAccess) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Get query parameters
    const searchParams = request.nextUrl.searchParams;
    const search = searchParams.get('search');

==> src/app/api/admin/customers/[id]/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';
import { verifyAdminAccess } from '@/lib/utils/server';

import { logger } from "@/lib/logger";
/**
 * GET /api/admin/clients/[id]
 * Get a specific client
 */
export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
  try {
    // Verify admin access
    const hasAccess = await verifyAdminAccess();
    if (!hasAccess) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // Get client
    const client = await prisma.customer.findUnique({
      where: {

==> src/app/api/admin/bookings/route.ts <==
import { NextResponse } from 'next/server';
import { verifyAdminAccess } from '@/lib/utils/server';
import { logger } from '@/lib/logger';
import { getCalBookings } from '@/lib/cal/api';
// CalBookingPaymentInfo defined inline where needed

// Route runtime configuration (Node.js runtime for Next.js 15.2.0+)
export const runtime = 'nodejs';

export async function GET(_req: Request) {
  try {
    // Verify admin access
    const hasAccess = await verifyAdminAccess();
    if (!hasAccess) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    void logger.info('✅ Admin access granted - production mode');

    // Fetch bookings from Cal.com API since there's no Booking model in Prisma

==> src/app/api/admin/appointments/route.ts <==
/**
 * API Routes for Appointments
 * 
 * These routes directly use Cal.com for appointment management
 * instead of maintaining a separate appointments system.
 */
import { NextRequest, NextResponse } from 'next/server';
import { verifyAdminAccess } from '@/lib/utils/server';
import type { Prisma, AppointmentStatus, Appointment } from '@prisma/client';
// Define types inline since they're not in Prisma
interface CalBookingPaymentInfo {
id?: number;
amount?: number;
currency?: string;
status?: 'COMPLETED' | 'PENDING' | 'FAILED';
success?: boolean;
}

interface CalBookingOrganizer {
id?: number;

==> src/app/api/admin/appointments/[id]/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';
import { verifyAdminAccess } from '@/lib/utils/server';
import type { Appointment } from '@prisma/client';
import { AppointmentStatus } from '@prisma/client';
import { logger } from "@/lib/logger";
/**
 * GET /api/admin/appointments/[id]
 * Get a specific appointment by ID
 */
export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
  try {
    // Verify admin access
    const hasAccess = await verifyAdminAccess();
    if (!hasAccess) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    const id = params.id;


==> src/app/api/admin/dashboard/route.ts <==
/**
 * Admin Dashboard API - Cal.com Integration
 * 
 * Purpose: Fetch real-time booking and analytics data for admin dashboard
 * Dependencies: Cal.com webhooks, Prisma database, analytics services
 */

import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { prisma } from "@/lib/db/prisma";
import type { User } from '@prisma/client';

import { logger } from "@/lib/logger";
export async function GET(request: NextRequest) {
  try {
    // Verify admin authentication
    const session = await auth.api.getSession({
      headers: request.headers
    });


==> src/app/api/admin/set-role/route.ts <==
import { prisma } from "@/lib/db/prisma";
import { NextResponse } from "next/server";
import { z } from "zod";
import { logger } from "@/lib/logger";
import { ApiErrors } from "@/lib/api-errors";
import { withAdmin } from "@/lib/auth/api-auth";

// Validation schema for set role request
const setRoleSchema = z.object({
  email: z.string().email(),
  role: z.enum(['user', 'admin', 'superadmin']).default('admin')
});

// POST handler with admin authorization
export const POST = withAdmin(async (request, adminUser) => {
  try {
    // Parse and validate request body
    const body = await request.json();
    
    try {

==> src/app/api/cal/webhook/route.ts <==
/**
 * Production Cal.com webhook handler
 *
 * Handles real-time booking events from Cal.com with proper security,
 * data validation, and database synchronization.
 */

import { NextRequest, NextResponse } from 'next/server';
import { createHmac } from 'crypto';
import { logger } from '@/lib/logger';
import { prisma } from '@/lib/db/prisma';
import { getCalServices } from '@/lib/cal/config';
import type { CalWebhookPayload } from '@prisma/client';

/**
 * Verify Cal.com webhook signature
 */
function verifyCalSignature(body: string, signature: string | null): boolean {
  const webhookSecret = process.env['CAL_WEBHOOK_SECRET'] ?? '';
  

==> src/app/api/cal/refresh/route.ts <==
/**
 * Cal.com OAuth Token Refresh Endpoint
 * 
 * Purpose: Handle OAuth token refresh for Cal.com Atoms
 * Dependencies: Cal.com OAuth credentials
 */

import { NextRequest, NextResponse } from 'next/server';

import { logger } from "@/lib/logger";
export async function POST(request: NextRequest) {
  try {
    const { refreshToken } = await request.json();
    
    if (!refreshToken) {
      return NextResponse.json(
        { error: 'Refresh token is required' },
        { status: 400 }
      );
    }

==> src/app/api/cal/event-types/route.ts <==
import { NextResponse } from 'next/server';
import { getCalEventTypes } from '@/lib/cal/api';

import { logger } from "@/lib/logger";
/**
 * GET /api/cal/event-types
 * Fetch all event types from Cal.com to find IDs
 */
export async function GET() {
  try {
    const eventTypes = await getCalEventTypes();

    return NextResponse.json({
      success: true,
      eventTypes,
      message: 'Event types retrieved successfully',
    });
  } catch (error) {
    void void logger.error('Error fetching Cal.com event types:', error);


==> src/app/api/cal/health/route.ts <==
/**
 * Cal.com Health Check API Endpoint
 * 
 * Purpose: Verify Cal.com API connectivity and service health
 * Assumptions: Cal.com API key configured
 * Dependencies: Cal.com API client
 * 
 * Trade-offs:
 * - Public vs authenticated endpoint: Accessibility vs security
 * - Detailed vs basic health info: Debugging vs information disclosure
 * - Caching vs real-time: Performance vs accuracy
 */

import { NextResponse } from 'next/server';
import { calApi } from '@/lib/cal/api';

export async function GET() {
  const startTime = Date.now();
  
  try {

==> src/app/api/webhooks/cal/route.ts <==
/**
 * Cal.com Webhook Handler
 * 
 * Purpose: Process Cal.com webhook events and trigger real-time dashboard updates
 * Assumptions: Webhook signature verification, database available
 * Dependencies: Cal.com API client, analytics service, real-time publisher
 * 
 * Trade-offs:
 * - Immediate processing vs queued processing: Responsiveness vs reliability
 * - Comprehensive error handling vs performance: Robust handling vs speed
 * - Real-time updates vs batch processing: User experience vs efficiency
 */

import { NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';
import { verifyWebhookSignature } from '@/lib/cal/api';
import { calAnalyticsService } from '@/lib/analytics/cal-analytics-service';
import { db } from '@/lib/db';
import { z } from 'zod';
import { logger } from "@/lib/logger";

==> src/app/api/upload/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { auth } from '@/lib/auth';
import { ENV } from '@/lib/utils/env';
import { headers } from 'next/headers';
import { logger } from '@/lib/logger';
import { ApiErrors } from '@/lib/api-errors';
import { validateFileWithErrorHandling, generateSecureFilename, getFileValidationOptions } from '@/lib/utils/file-validation';

// Route runtime configuration (Node.js runtime for Next.js 15.2.0+)
export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    // Check authentication using direct API access (Next.js 15.2.0+ feature)
    const session = await auth.api.getSession({
      headers: await headers()
    });
    
    if (!session?.user) {

==> src/app/api/analytics/web-vitals/route.ts <==
/**
 * Web Vitals Analytics API Endpoint
 *
 * Collects and processes Web Vitals performance metrics
 * for monitoring and analysis.
 */
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

import { logger } from "@/lib/logger";
// Validation schema for Web Vitals data
const webVitalsSchema = z.object({
  name: z.enum(['CLS', 'FCP', 'INP', 'LCP', 'TTFB']),
  value: z.number().positive(),
  id: z.string(),
  rating: z.enum(['good', 'needs-improvement', 'poor']),
  navigationType: z.string().optional(),
  timestamp: z.number(),
  url: z.string().url(),
  userAgent: z.string(),

==> src/app/api/analytics/custom-metrics/route.ts <==
/**
 * Custom Metrics Analytics API Endpoint
 *
 * Collects custom performance metrics and events
 * for detailed application monitoring.
 */
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

import { logger } from "@/lib/logger";
// Validation schema for custom metrics
const customMetricSchema = z.object({
  name: z.string().min(1).max(100),
  value: z.number(),
  timestamp: z.number(),
  metadata: z.record(z.unknown()).optional(),
});

// In-memory storage for development
const customMetrics: Array<z.infer<typeof customMetricSchema> & { id: string }> = [];

==> src/app/api/analytics/booking-completed/route.ts <==
/**
 * Booking Completed Analytics Endpoint
 * 
 * Purpose: Track successful booking completions for analytics
 * Assumptions: Cal.com Atoms integration, analytics service available
 * Dependencies: Analytics service, real-time publisher
 * 
 * Trade-offs:
 * - Real-time tracking vs batch processing: Immediate insights vs performance
 * - Detailed tracking vs privacy: Analytics depth vs user privacy
 * - Synchronous vs asynchronous: Response speed vs processing completeness
 */

import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { z } from 'zod';

import { logger } from "@/lib/logger";
// Validation schema
const bookingCompletedSchema = z.object({

==> src/app/api/debug/auth/route.ts <==
import { auth } from "@/lib/auth";
import { NextRequest, NextResponse } from "next/server";

import { logger } from "@/lib/logger";
export async function GET(request: NextRequest) {
  try {
    // Get session using Better Auth
    const session = await auth.api.getSession({
      headers: request.headers
    });

    return NextResponse.json({
      status: "success",
      session: session ? {
        user: {
          id: session.user.id,
          email: session.user.email,
          role: session.user.role,
        },
        sessionId: session.session.id,

==> src/app/api/debug/server-test/route.ts <==
import { NextRequest, NextResponse } from 'next/server';

export async function GET(_request: NextRequest) {
  return NextResponse.json({ 
    status: 'success',
    message: 'Server is working',
    timestamp: new Date().toISOString(),
    env: {
      NODE_ENV: process.env.NODE_ENV,
      hasDbUrl: !!process.env.DATABASE_URL,
      hasAuthSecret: !!process.env.BETTER_AUTH_SECRET,
    }
  });
}

==> src/app/api/debug/db-test/route.ts <==
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/auth';

import { logger } from "@/lib/logger";
export async function GET(_request: NextRequest) {
  try {
    // Test database connection
    await prisma.$queryRaw`SELECT 1 as test`;
    
    return NextResponse.json({ 
      status: 'success',
      message: 'Database connection working',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    void logger.error('Database connection error:', error);
    return NextResponse.json({ 
      status: 'error',
      message: 'Database connection failed',
      error: error instanceof Error ? error.message : 'Unknown error'

==> src/app/api/debug/db/route.ts <==
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

import { logger } from "@/lib/logger";
export async function GET(_request: NextRequest) {
  const prisma = new PrismaClient();
  
  try {
    void logger.info("Testing database connection...");
    
    // Test basic connection
    await prisma.$connect();
    void logger.info("✅ Connected to database");
    
    // Test if tables exist
    const userCount = await prisma.user.count();
    void logger.info("✅ User table exists, count:", userCount);
    
    await prisma.$disconnect();
    

==> src/app/api/debug/set-admin/route.ts <==
/**
 * Debug endpoint to create admin user
 * 
 * Purpose: Quick setup for admin access during development
 * Assumptions: Development environment only
 * Dependencies: Prisma, Better Auth
 */

import { NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';

import { logger } from "@/lib/logger";
export async function GET() {
  try {
    // Check if we're in development
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json({
        success: false,
        error: 'This endpoint is only available in development'
      });

==> src/app/loading.tsx <==
/**
 * Root app loading state
 * Provides loading UI for the entire application
 * Uses the loading component for consistency
 */
import { LoadingUI } from '@/components/admin/layout/Loading';

export default function Loading() {
  return <LoadingUI type="page" />;
}

==> src/app/metadata.ts <==
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Ink 37 - Custom Tattoos by Fernando Govea',
  description:
    'Experience custom tattoo artistry in a home-like environment in the Dallas/Fort Worth metroplex. Book your consultation today.',
  keywords:
    'tattoo, custom tattoos, Fernando Govea, Ink 37, Dallas, Fort Worth, tattoo artist, tattoos',
  authors: [{ name: 'Fernando Govea', url: 'https://ink37tattoos.com' }],
  creator: 'Fernando Govea',
  publisher: 'Ink 37 Tattoo',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  metadataBase: new URL('https://ink37tattoos.com'),
  alternates: {
    canonical: '/',
  },

==> src/app/page.tsx <==
import type { Metadata } from 'next';
import HomeClient from '@/components/home/HomeClient';

// Enable Partial Prerendering (PPR) for optimal performance
export const experimental_ppr = true;

// Force static generation with revalidation every 4 hours
export const dynamic = 'force-static';
export const revalidate = 14400;

export const metadata: Metadata = {
  title: 'Ink 37 | Custom Tattoos in Dallas/Fort Worth by Fernando Govea',
  description:
    'Premier tattoo artist Fernando Govea in the Dallas/Fort Worth metroplex specializing in custom designs, traditional tattoos, and fine line work. Schedule your consultation today.',
  keywords: [
    'tattoo artist Dallas',
    'Fort Worth tattoo',
    'custom tattoos',
    'Fernando Govea',
    'Ink 37',

==> src/app/services/metadata.ts <==
import type { Metadata } from 'next';
import { generatePageMetadata } from '@/lib/seo/seo-config';

export const metadata: Metadata = generatePageMetadata({
  title: 'Tattoo Services | Custom Designs, Cover-ups & Fine Line Work',
  description: 'Professional tattoo services in Crowley, TX including custom tattoo designs, cover-ups, fine line work, traditional tattoos, realism, and Japanese styles. Expert consultation and booking available.',
  keywords: [
    'tattoo services Crowley TX',
    'custom tattoo design',
    'cover-up tattoos',
    'fine line tattoos',
    'traditional tattoos',
    'realism tattoos',
    'japanese style tattoos',
    'tattoo consultation',
    'professional tattoo artist',
    'DFW tattoo services'
  ],
  canonical: 'https://ink37tattoos.com/services',
  ogImage: '/images/traditional.jpg',

==> src/app/services/page.tsx <==
import type { Metadata } from 'next';
import ServicesClient from '@/components/services/ServicesClient';

// Force static generation
export const dynamic = 'force-static';
export const revalidate = 86400; // 24 hours

export const metadata: Metadata = {
  title: 'Services | Ink 37 Tattoos',
  description:
    'Explore our range of tattoo services including custom designs, cover-ups, portrait work, and Japanese style tattoos. Book your consultation today.',
  keywords: [
    'tattoo services',
    'custom tattoos',
    'Ink 37 Tattoos',
    'Dallas tattoo',
    'Fort Worth tattoo',
  ],
  openGraph: {
    title: 'Tattoo Services | Ink 37',

==> src/app/global-error.tsx <==
'use client';

import { ErrorHandler } from '@/components/error/error-boundary';

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return <ErrorHandler error={error} reset={reset} variant="global" />;
}

==> src/app/not-found.tsx <==
'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Search, Home, ArrowLeft } from 'lucide-react';

/**
 * 404 Not Found Page
 *
 * This page is displayed when a user tries to access a non-existent route
 * Features:
 * - Clear messaging

==> src/app/providers.tsx <==
/**
 * Application Providers - Enhanced with Cal.com Integration
 *
 * Purpose: Central provider setup for all application services
 * Dependencies: Better Auth, tRPC, Cal.com, themes, analytics
 * 
 * Trade-offs:
 * - Provider nesting vs performance: Organization vs overhead
 * - Global state vs local state: Consistency vs flexibility
 * - Error boundaries vs simple setup: Robustness vs complexity
 */
'use client';

import { TrpcClientProvider } from '@/components/providers/TRPCProvider';
import { CalProvider } from '@/providers/CalProvider';
import { CalErrorBoundary } from '@/components/CalErrorBoundary';
import { ThemeProvider } from 'next-themes';
import { Toaster } from 'sonner';
import { AnalyticsProvider } from '@/components/providers/AnalyticsProvider';
import { LazyMotionProvider } from '@/components/performance/LazyMotion';

🧩 COMPONENTS:
==> src/components/blocks/dropzone.tsx <==
'use client';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { CheckCircle, File, Loader2, Upload, X } from 'lucide-react';
import {
  useDropzone,
  type FileWithPath,
  type FileRejection,
  type FileError,

==> src/components/ui/aspect-ratio.tsx <==
// CONVERTED TO SERVER COMPONENT: Radix AspectRatio primitive works in Server Components

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };

==> src/components/ui/alert-dialog.tsx <==
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/utils';
import { buttonVariants } from '@/components/ui/button';

const AlertDialog = AlertDialogPrimitive.Root;


==> src/components/ui/pagination.tsx <==
import * as React from 'react';
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';
import { cn } from '@/lib/utils/styling';
import { buttonVariants } from '@/components/ui/button';

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}

==> src/components/ui/link.tsx <==
'use client';

import React from 'react';
import NextLink from 'next/link';
import { cn } from '@/utils';

interface LinkProps extends React.ComponentPropsWithoutRef<typeof NextLink> {
  noWrapper?: boolean;
}


==> src/components/ui/tabs.tsx <==
// CONVERTED TO SERVER COMPONENT: Radix Tabs work in Server Components when controlled externally

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';
import { cn } from '@/utils';

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ComponentRef<typeof TabsPrimitive.List>,

==> src/components/ui/card.tsx <==
// CONVERTED TO SERVER COMPONENT: Pure layout components with CSS classes only

import * as React from 'react';

import { cn } from '@/lib/utils';

function Card({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card"

==> src/components/ui/slider.tsx <==
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/utils';

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>

==> src/components/ui/popover.tsx <==
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/utils';

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

==> src/components/ui/aceternity-input.tsx <==
'use client'

import * as React from "react"
import { cn } from "@/lib/utils/styling"
import { motion, useMotionTemplate, useMotionValue } from "framer-motion"

export interface AceternityInputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  wrapperClassName?: string
}

==> src/components/ui/progress.tsx <==
// CONVERTED TO SERVER COMPONENT: Radix Progress primitive with static transform works in Server Components

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

const Progress = React.forwardRef<
  React.ComponentRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>

==> src/components/ui/infinite-list.tsx <==
'use client';

import { cn } from '@/lib/utils';
import * as React from 'react';

interface InfiniteListProps<T> {
  data: T[];
  isLoading?: boolean;
  isFetching?: boolean;
  hasMore?: boolean;

==> src/components/ui/icon.tsx <==
import React, { forwardRef } from 'react';
import { cn } from '@/lib/utils';

// Type for Lucide React icons - matches the actual props
interface LucideIconProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  color?: string;
  strokeWidth?: number;
  absoluteStrokeWidth?: boolean;
}

==> src/components/ui/toaster.tsx <==
import React from 'react';
import { Toaster as SonnerToaster } from 'sonner';

export interface ToasterProps extends React.ComponentProps<typeof SonnerToaster> {
  /** Position where toasts will appear */
  position?:
    | 'top-left'
    | 'top-right'
    | 'top-center'
    | 'bottom-left'

==> src/components/ui/sheet.tsx <==
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';
import { cn } from '@/utils';

type SheetContentProps = React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content> &
  VariantProps<typeof sheetVariants> & {

==> src/components/ui/scroll-area.tsx <==
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/utils';

const ScrollArea = React.forwardRef<
  React.ComponentRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>

==> src/components/ui/label.tsx <==
import * as React from 'react';

// CONVERTED TO SERVER COMPONENT: Radix Label primitive works in Server Components
import * as LabelPrimitive from '@radix-ui/react-label';

import { cn } from '@/utils';

function Label({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root

==> src/components/ui/accordion.tsx <==
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';
import { motion } from 'framer-motion';
import { cn } from '@/utils';

const Accordion = AccordionPrimitive.Root;


==> src/components/ui/tooltip.tsx <==
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

==> src/components/ui/alert.tsx <==
// CONVERTED TO SERVER COMPONENT: Pure display component with forwardRef and CSS variants only

import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7',
  {

==> src/components/ui/loading-spinner.tsx <==
'use client'

import { Loader2 } from 'lucide-react'

export function LoadingSpinner({ className, size = 'md' }: { className?: string; size?: 'sm' | 'md' | 'lg' }) {
  // Size classes based on the size prop
  const sizeClasses = {
    sm: "h-5 w-5",
    md: "h-8 w-8",
    lg: "h-12 w-12"

==> src/components/ui/switch.tsx <==
'use client';

import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';

import { cn } from '@/utils';

const Switch = React.forwardRef<
  React.ComponentRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>

==> src/components/ui/calendar.tsx <==
'use client';

import * as React from 'react';
import { DayPicker } from 'react-day-picker';

import { cn } from '@/utils';
import { buttonVariants } from '@/components/ui/button';

type CalendarProps = React.ComponentPropsWithoutRef<typeof DayPicker>;


==> src/components/ui/breadcrumb.tsx <==
// CONVERTED TO SERVER COMPONENT: Pure navigation components with forwardRef and CSS only

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

const Breadcrumb = React.forwardRef<
  HTMLElement,

==> src/components/ui/radio-group.tsx <==
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { Circle } from 'lucide-react';

import { cn } from '@/utils';

const RadioGroup = React.forwardRef<
  React.ComponentRef<typeof RadioGroupPrimitive.Root>,

==> src/components/ui/avatar.tsx <==
// CONVERTED TO SERVER COMPONENT: Radix Avatar primitives work in Server Components for static display

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/utils';

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>

==> src/components/ui/logo.tsx <==
'use client';

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { cn } from '@/utils';
import { motion } from 'framer-motion';
import type { LogoProps } from '@prisma/client';

export function Logo({

==> src/components/ui/icons.tsx <==
import {
AlertTriangle,
ArrowRight,
Check,
ChevronLeft,
ChevronRight,
Command,
CreditCard,
File,
FileText,

==> src/components/ui/dialog.tsx <==
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { X } from 'lucide-react';

import { cn } from '@/utils';

const Dialog = DialogPrimitive.Root;


==> src/components/ui/badge.tsx <==
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:

==> src/components/ui/sidebar.tsx <==
'use client';

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { type VariantProps, cva } from 'class-variance-authority';
import { PanelLeft } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

==> src/components/ui/table.tsx <==
// CONVERTED TO SERVER COMPONENT: Pure HTML table elements with forwardRef work in Server Components

import * as React from 'react';

import { cn } from '@/utils';

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />

==> src/components/ui/separator.tsx <==
// CONVERTED TO SERVER COMPONENT: Radix Separator primitive works in Server Components

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/utils';

const Separator = React.forwardRef<
  React.ComponentRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>

==> src/components/ui/progress-indicators.tsx <==
'use client';

import { motion } from 'framer-motion';
import { Progress } from '@/components/ui/progress';
import { Loader2, CheckCircle, XCircle } from 'lucide-react';

// Component-specific types - not shared, inline definition appropriate
interface LinearProgressProps {
  value: number;
  max?: number;

==> src/components/ui/button.tsx <==
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 aria-invalid:ring-2 aria-invalid:ring-destructive/20 aria-invalid:border-destructive",
  {
    variants: {

==> src/components/ui/toggle.tsx <==
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/utils';

const toggleVariants = cva(
  'inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',

==> src/components/ui/loading-skeletons.tsx <==
'use client';

import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardContent, CardHeader } from '@/components/ui/card';

export function TableSkeleton() {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-4">
        <Skeleton className="h-9 w-64" />

==> src/components/ui/theme-toggle.tsx <==
'use client';

import * as React from 'react';
import { Moon, Sun, Monitor } from 'lucide-react';
import { useTheme } from 'next-themes';

import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,

==> src/components/ui/checkbox.tsx <==
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/utils';

const Checkbox = React.forwardRef<
  React.ComponentRef<typeof CheckboxPrimitive.Root>,

==> src/components/ui/animated-page.tsx <==
'use client';

import { AnimatePresence } from 'framer-motion';
import { motion } from '@/components/performance/LazyMotion';
import { type ReactNode } from 'react';
import {
  type AnimatedPageProps,
  type FadeInProps,
  type SlideInProps,
  type StaggerContainerProps,

==> src/components/ui/collapsible.tsx <==
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;


==> src/components/ui/dropdown-menu.tsx <==
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Check, ChevronRight, Circle } from 'lucide-react';

import { cn } from '@/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;


==> src/components/ui/select.tsx <==
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { Check, ChevronDown, ChevronUp } from 'lucide-react';

import { cn } from '@/utils';

const Select = SelectPrimitive.Root;


==> src/components/ui/textarea.tsx <==
// CONVERTED TO SERVER COMPONENT: Pure HTML textarea element with forwardRef works in Server Components

import * as React from 'react';

import { cn } from '@/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({ className, ...props }, ref) => {
    return (
      <textarea

==> src/components/ui/input.tsx <==
import * as React from "react"
import { cn } from "@/lib/utils/styling"

// Strongly typed input component
const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(

==> src/components/ui/skeleton.tsx <==
import { cn } from '@/utils';

// CONVERTED TO SERVER COMPONENT: Pure CSS animation with no React hooks or client-side logic

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn('animate-pulse rounded-md bg-primary/10', className)} {...props} />;
}

export { Skeleton };

==> src/components/ui/form.tsx <==
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import { cn } from '@/utils';
import { Label } from '@/components/ui/label';

// Component-specific form types - inline definition appropriate
type FormFieldContextValue = {

==> src/components/ui/carousel.tsx <==
'use client';

import * as React from 'react';
import useEmblaCarousel from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = ReturnType<typeof useEmblaCarousel>[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;

==> src/components/CTASection.tsx <==
'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowRight } from 'lucide-react';
import type { CTASectionProps } from '@prisma/client';

/**

==> src/components/home/HomeClient.tsx <==
'use client';

import * as React from 'react';
import { AnimatePresence } from 'framer-motion';
import { motion } from '@/components/performance/LazyMotion';
import Image from 'next/image';
import Link from 'next/link';
import { ChevronLeft, ChevronRight } from 'lucide-react';

// Images for the carousel - preload all for better performance

==> src/components/home/featured-carousel.tsx <==
'use client';

import * as React from 'react';
import Image from 'next/image';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,

==> src/components/contact/ContactForm.tsx <==
'use client';

import React, { useActionState, useId } from 'react';
import { useFormStatus } from 'react-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { submitContactAction } from '@/lib/actions/contact-actions';
import { Mail, Send, CheckCircle, AlertCircle } from 'lucide-react';

==> src/components/contact/ContactClient.tsx <==
'use client';

import React from 'react';
import ContactForm from '@/components/contact/ContactForm';
import { motion } from '@/components/performance/LazyMotion';
import { Mail, Instagram, MapPin, Clock, ChevronRight, Phone, Info, HelpCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import Footer from '@/components/layouts/Footer';
import { TikTokIcon } from '@/components/icons';

==> src/components/booking/cal-embed.tsx <==
/**
 * Cal.com Embed Component
 * 
 * Purpose: Embed Cal.com booking calendar via iframe
 * Rendering: CSR for dynamic calendar loading
 * Dependencies: Cal.com account configuration
 * 
 * Trade-offs:
 * - Iframe vs API: Simpler implementation but less control
 * - Fixed height vs dynamic: Better UX but requires specific height

==> src/components/booking/cal-booking.tsx <==
'use client';

import React from 'react';
import { getCalServices } from '@/lib/cal/config';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Calendar, Clock, DollarSign } from 'lucide-react';
import type { CalService } from '@prisma/client';

interface CalBookingUnifiedProps {

==> src/components/faq/FAQAccordion.tsx <==
'use client';

import React, { useState } from 'react';
import { motion } from '@/components/performance/LazyMotion';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';

==> src/components/faq/FAQClient.tsx <==
'use client';

import React from 'react';
import { FAQAccordion } from '@/components/faq/FAQAccordion';
import FAQSearch from '@/components/faq/FAQSearch';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import {
  HelpCircle,
  ClipboardList,

==> src/components/faq/FAQSearch.tsx <==
'use client';

import React, { useState } from 'react';
import { AnimatePresence } from 'framer-motion';
import { motion } from '@/components/performance/LazyMotion';
import { Search, HelpCircle, ArrowRight } from 'lucide-react';
import type { FAQItemType, FAQSearchProps, FAQCategory, AllFAQItem } from '@prisma/client';

export default function FAQSearch({ categories }: FAQSearchProps) {
  const [searchTerm, setSearchTerm] = useState('');

==> src/components/gallery/DesignViewer.tsx <==
/**
 * Design Viewer Component
 * 
 * Provides an interface for viewing design details
 * with related designs and comprehensive design information.
 * Features conditional data loading and design relationship mapping.
 */

'use client';


==> src/components/gallery/DynamicLightbox.tsx <==
'use client';

import dynamic from 'next/dynamic';
import { Skeleton } from '@/components/ui/skeleton';
import { useEffect, useState } from 'react';
import type { LightboxProps } from 'yet-another-react-lightbox';

// Loading component for lightbox
const LightboxSkeleton = () => (
  <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/95">

==> src/components/gallery/ModernGallery.tsx <==
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Skeleton } from '@/components/ui/skeleton';
import { Search, Filter, ImageIcon } from 'lucide-react';
import { AceternityLayoutGrid } from './AceternityLayoutGrid';

==> src/components/gallery/GalleryClient.tsx <==
'use client';

import React from 'react';
import { ModernGallery } from '@/components/gallery/ModernGallery';
import Footer from '@/components/layouts/Footer';

/**
 * Gallery Client Component
 *
 * Client-side component for the Gallery page that uses the modern Aceternity UI layout grid.

==> src/components/gallery/DesignDetail.tsx <==
'use client';

import { useState, useEffect, useRef } from 'react';
import { useDesign } from '@/hooks/use-gallery';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { useRouter } from 'next/navigation';

==> src/components/gallery/AceternityLayoutGrid.tsx <==
"use client";

import React, { JSX, useState } from "react";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils/styling";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { ShareDialog } from "./share-dialog";
import { CalendarIcon, Share } from "lucide-react";
import { useRouter } from "next/navigation";

==> src/components/gallery/share-dialog.tsx <==
'use client';

import { useState } from 'react';
import { logger } from "@/lib/logger";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,

==> src/components/gallery/AdvancedGalleryManager.tsx <==
/**
 * Advanced Gallery Manager Component
 * 
 * Provides comprehensive gallery management with granular loading,
 * statistics display, category filtering, and search functionality.
 * Features optimized performance with progressive rendering.
 */

'use client';


==> src/components/gallery/GallerySkeleton.tsx <==
/**
 * Gallery Skeleton Component
 *
 * Loading skeleton for the gallery grid to improve perceived performance.
 */
import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardFooter } from '@/components/ui/card';

export function GallerySkeleton() {
  return (

==> src/components/gallery/video-player.tsx <==
'use client';

import { useRef, useState, useEffect } from 'react';
import { Play, Pause, Volume2, VolumeX, Maximize, Minimize, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import { trackVideoView } from '@/lib/api';
import { motion } from 'framer-motion';
import { logger } from "@/lib/logger";


==> src/components/gallery/DesignDetailSkeleton.tsx <==
/**
 * Design Detail Skeleton Component
 *
 * Loading skeleton for the design detail page to improve perceived performance.
 */
import { Skeleton } from '@/components/ui/skeleton';

export function DesignDetailSkeleton() {
  return (
    <div className="space-y-8">

==> src/components/providers/TRPCProvider.tsx <==
/**
 * TRPC Provider Component
 *
 * This component wraps the application with the TRPC provider,
 * enabling type-safe API access throughout the client components.
 */
'use client';

import { TRPCProvider } from '@/lib/trpc/client-provider';


==> src/components/providers/AnalyticsProvider.tsx <==
'use client';

import { Analytics } from '@vercel/analytics/react';
import Script from 'next/script';
import { useEffect } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import { ENV } from '@/lib/utils/env';

import { logger } from "@/lib/logger";
// Google Analytics tracking

==> src/components/providers/ReactQueryProvider.tsx <==
'use client';

import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { httpBatchLink } from '@trpc/client';
import { createTRPCReact } from '@trpc/react-query';
import superjson from 'superjson';
import type { AppRouter } from '@/lib/trpc/api-router';

// Create the tRPC React hooks

==> src/components/admin/Data-Table.tsx <==
'use client';

import * as React from 'react';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,

==> src/components/admin/bookings/Bookings-View.tsx <==
'use client';

import React, { useState, useMemo } from 'react';
import { Search, Calendar, User, Clock, DollarSign, ChevronDown } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Select,

==> src/components/admin/appointments/Appointments-View.tsx <==
'use client';

import React, { useState } from 'react';
import { DataTable } from '@/components/admin/Data-Table';
import type { Prisma } from '@prisma/client';

type Appointment = Prisma.AppointmentGetPayload<{}>;

const appointmentColumns: AdminDataTableColumn<Appointment>[] = [
	{

==> src/components/admin/auth/ClientHydration.tsx <==
'use client';

import React, { useState, useEffect, ReactNode } from 'react';

interface ClientHydrationProps {
  children: ReactNode;
  fallback?: ReactNode;
}

/**

==> src/components/admin/auth/protected-route.tsx <==
'use client';

import { useAuthState } from '@/lib/auth-client';
import { ReactNode, useMemo } from 'react';
import { Loader2 } from 'lucide-react';

interface ProtectedRouteProps {
  children: ReactNode;
  requireAuth?: boolean;
  requireAdmin?: boolean;

==> src/components/admin/auth/Auth-Check.tsx <==
"use client";

import { useUser, useIsAdmin, authClient } from "@/lib/auth-client";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { AlertCircle, Loader2, ShieldAlert, LogOut, Chrome } from "lucide-react";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { logger } from "@/lib/logger";


==> src/components/admin/auth/auth-provider.tsx <==
'use client';

import { createContext, useContext } from 'react';
import { useUser, useSession } from '@/lib/auth-client';
import type { AuthContextType, AuthProviderProps } from '@prisma/client';

const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Auth Provider Component

==> src/components/admin/auth/Login-Client.tsx <==
'use client';

import { authClient } from '@/lib/auth-client';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, AlertCircle } from "lucide-react";

==> src/components/admin/auth/AuthWrapper.tsx <==
"use client";

import { useMemo } from "react";
import { useSession } from "@/lib/auth-client";
import { useRouter } from "next/navigation";

interface AuthWrapperProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  redirectTo?: string;

==> src/components/admin/layout/Admin-Layout.tsx <==
'use client';

import React from 'react';
import { Badge } from '@/components/ui/badge';
import type { AdminPageHeaderProps, AdminPageStructureProps } from '@/lib/prisma-types';

// Types moved to @/types/component-types:
// AdminPageHeaderProps, AdminPageStructureProps

/**

==> src/components/admin/layout/Header.tsx <==
'use client'

import React from 'react'

export function AdminHeader() {
  return (
    <header className="h-16 bg-gray-900 border-b border-gray-800 flex items-center justify-between px-6">
      {/* Left side - could be used for breadcrumbs or page title */}
      <div className="flex items-center">
        {/* This matches the minimal header in the reference image */}

==> src/components/admin/layout/Loading.tsx <==
/**
 * Loading UI Components
 * 
 * This file contains centralized loading components for different areas of the application.
 * It avoids duplicating loading UI across multiple files.
 */

import React from 'react';

/**

==> src/components/admin/layout/Sidebar.tsx <==
'use client';

import * as React from 'react';
import { usePathname, useRouter } from 'next/navigation';
import Link from 'next/link';
import {
Command,
LayoutDashboard,
Calendar,
Users,

==> src/components/admin/dashboard/Quick-Actions.tsx <==
import { PlusCircle, UserPlus, Calendar, Upload, Zap } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import Link from 'next/link';
import { cn } from '@/lib/utils';

interface QuickActionProps {
  title: string;
  description: string;
  href: string;
  color: 'red' | 'blue' | 'green' | 'purple';

==> src/components/admin/dashboard/Charts.tsx <==
'use client';

import * as React from 'react';
import {
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,

==> src/components/admin/dashboard/Metrics-Card.tsx <==
'use client';

import { ArrowUpRight, ArrowDownRight } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import type { MetricCardProps } from '@prisma/client';

export default function MetricCard({

==> src/components/admin/dashboard/TimeRange-Filter.tsx <==
'use client';

import * as React from 'react';
import { Calendar, ChevronDown, Clock, Filter } from 'lucide-react';
import { format, subDays, subMonths, subYears, startOfDay, endOfDay } from 'date-fns';
import { motion } from 'framer-motion';

import { Button } from '@/components/ui/button';
import { Calendar as CalendarComponent } from '@/components/ui/calendar';
import type { DateRange as ReactDayPickerDateRange } from 'react-day-picker';

==> src/components/admin/dashboard/Analytics-View.tsx <==
'use client';

/**
 * Admin Dashboard Client Component
 * 
 * Purpose: Client wrapper for admin dashboard with real-time analytics
 * Responsive design with proper spacing and modern layout
 */

import React, { useState } from 'react';

==> src/components/admin/Status-Badge.tsx <==
import React from 'react';

// CONVERTED TO SERVER COMPONENT: Pure display component with CSS classes only
// import { Badge } from '@/components/ui/badge'; // unused in this file
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils/styling';

const statusBadgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {

==> src/components/admin/crud/Customer-Management.tsx <==
'use client';

import React, { useState, useCallback } from 'react';
import { Plus, User, Mail, Phone, MapPin, Loader2, Edit, Trash2, Eye } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';

==> src/components/admin/crud/User-Management.tsx <==
'use client';

import React, { useState, useEffect } from 'react';
import { LoadingUI } from '@/components/admin/layout/Loading';
import type { AdminExtendedUser } from '@prisma/client';
import { logger } from "@/lib/logger";
import { 
  listUsers,
  banUser,
  unbanUser,

==> src/components/charts/DynamicCharts.tsx <==
'use client';

import dynamic from 'next/dynamic';
import { Skeleton } from '@/components/ui/skeleton';

// Loading state for charts
const ChartSkeleton = ({ height = 350 }: { height?: number }) => (
  <div className="w-full">
    <Skeleton className="w-full" style={{ height }} />
  </div>

==> src/components/cal/cal-atoms-booking.tsx <==
/**
 * Cal.com Atoms Booking Component
 * 
 * Purpose: Modern Cal.com integration using Cal Atoms for embedded booking
 * Assumptions: Cal.com Atoms configured, event types available
 * Dependencies: @calcom/atoms, analytics tracking
 * 
 * Trade-offs:
 * - Cal Atoms vs iframe: Better UX and customization vs simpler implementation
 * - Real-time analytics vs performance: Detailed tracking vs minimal overhead

==> src/components/layouts/Navbar.tsx <==
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { AnimatePresence } from 'framer-motion';
import { motion } from '@/components/performance/LazyMotion';
import { Button } from '@/components/ui/button';
import { Menu, X } from 'lucide-react';


==> src/components/layouts/HomeNavbar.tsx <==
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Menu, X } from 'lucide-react';

// Navigation links

==> src/components/layouts/Footer.tsx <==
import React from 'react';

// CONVERTED TO SERVER COMPONENT: Static footer with Next.js Links
import Link from 'next/link';

export function Footer() {
  const currentYear = 2025;

  return (
    <footer className="bg-black border-t border-zinc-800 py-4">

==> src/components/layouts/NavigationSystem.tsx <==
'use client';

import { usePathname } from 'next/navigation';
import Navbar from './Navbar';
import HomeNavbar from './HomeNavbar';

export default function NavigationSystem() {
  const pathname = usePathname();

  // Admin and dashboard routes use their own layout - no navigation needed

==> src/components/icons/InstagramIcon.tsx <==
/**
 * Instagram brand icon component
 * SVG optimized from Bootstrap Icons library
 * Supports currentColor for easy theming
 */

interface InstagramIconProps {
  className?: string;
  size?: number | string;
  color?: string;

==> src/components/icons/TikTokIcon.tsx <==
/**
 * TikTok brand icon component
 * SVG optimized from Bootstrap Icons library
 * Supports currentColor for easy theming
 */

interface TikTokIconProps {
  className?: string;
  size?: number | string;
  color?: string;

==> src/components/icons/index.ts <==
// Brand icons
export { GoogleIcon } from './GoogleIcon';
export { TikTokIcon } from './TikTokIcon';
export { InstagramIcon } from './InstagramIcon';

==> src/components/icons/GoogleIcon.tsx <==
/**
 * Google brand icon component
 * SVG optimized from Bootstrap Icons library
 * Supports currentColor for easy theming
 */

interface GoogleIconProps {
  className?: string;
  size?: number | string;
  color?: string;

==> src/components/pwa/PWAManager.tsx <==
// PWA implementation will go here
'use client';

/**
 * PWA Manager Component
 * 
 * Temporarily disabled to fix build issues.
 * Will be re-enabled after authentication is working.
 */
export function PWAManager() {

==> src/components/icons.tsx <==
/**
 * Icon exports for tattoo website
 * Combines Lucide UI icons with brand-specific SVG icons for optimal bundle size
 */

import {
  // Layout & Navigation icons
  LayoutDashboard,
  Menu,
  ChevronLeft,

==> src/components/CalErrorBoundary.tsx <==
/**
 * Cal Error Boundary - Prevents Cal.com errors from breaking the app
 */

'use client';

import React from 'react';
import { logger } from '@/lib/logger';

interface CalErrorBoundaryState {

==> src/components/AboutClient.tsx <==
'use client';

import React from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { ChevronRight } from 'lucide-react';
import Footer from '@/components/layouts/Footer';


==> src/components/performance/LazyMotion.tsx <==
'use client';

import React from 'react';
import { LazyMotion, domAnimation, m as motion } from 'framer-motion';

/**
 * Lazy Motion Provider - loads only necessary motion features
 * Reduces bundle size by ~30KB for framer-motion
 * 
 * NOTE: Currently not in strict mode to allow gradual migration

==> src/components/seo/SEOHead.tsx <==
/**
 * SEO Head Component
 * 
 * Comprehensive SEO component that adds structured data, JSON-LD,
 * and additional metadata for improved search engine visibility.
 */

import Script from 'next/script';
import { generateBusinessStructuredData } from '@/lib/seo/seo-config';


==> src/components/seo/StructuredData.tsx <==
import Script from 'next/script';

interface BusinessInfo {
  name: string;
  description: string;
  address: {
    streetAddress: string;
    addressLocality: string;
    addressRegion: string;
    postalCode: string;

==> src/components/error/error-boundary.tsx <==
'use client';

import React, { Component, useEffect, type ErrorInfo, type ReactNode } from 'react';
import { ErrorFallback } from './error-fallback';
import { logger } from "@/lib/logger";
// Use direct process.env access instead of importing ENV
import { AlertTriangle, RefreshCw, Home, MessageCircle, ImageOff } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
// Define ErrorBoundaryState locally

==> src/components/error/error-fallback.tsx <==
'use client';

import React, { useState } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,

==> src/components/services/ServicesHeader.tsx <==
'use client';

import React, { useRef } from 'react';
import { useInView } from 'framer-motion';
import { motion } from '@/components/performance/LazyMotion';
import type { ServicesHeaderProps } from '@prisma/client';

/**
 * Services Header Component
 *

==> src/components/services/ServiceList.tsx <==
import React from 'react';

// CONVERTED TO SERVER COMPONENT: Static service list rendering
import { ServiceCard } from '@/components/services/ServiceCard';
import { CTASection } from '@/components/CTASection';
import type { Service } from '@prisma/client';

interface ServiceListProps {
  services: Service[];
}

==> src/components/services/ServiceCard.tsx <==
import React from 'react';

// CONVERTED TO SERVER COMPONENT: Static service card with CSS animations only
import Link from 'next/link';
import { ArrowRight } from 'lucide-react';
import { cn } from '@/lib/utils/styling';
import type { Service } from '@prisma/client';

interface ServiceCardProps {
  service: Service;

==> src/components/services/ServicesClient.tsx <==
'use client';

import React from 'react';
import { motion } from '@/components/performance/LazyMotion';
import Footer from '@/components/layouts/Footer';
import { ServicesHeader } from '@/components/services/ServicesHeader';
import { ServiceList } from '@/components/services/ServiceList';
import { services } from '@/data/services-data';

/**

==> src/components/analytics/PerformanceDashboard.tsx <==
/**
 * Performance Dashboard Component
 *
 * Admin dashboard component for viewing Web Vitals and performance metrics.
 * Shows real-time performance data and alerts.
 */
'use client';

import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

==> src/components/analytics/dashboard.tsx <==
'use client';

import React, { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { logger } from "@/lib/logger";
import { 
  Activity, 
  Users, 
  Calendar, 

==> src/components/analytics/MetricCard.tsx <==
'use client';

import React from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ArrowUpRight, ArrowDownRight, TrendingUp } from 'lucide-react';
import { cn } from '@/lib/utils';
import { MetricCardProps } from '@prisma/client';

export function MetricCard({ 

==> src/components/analytics/SkeletonLoaders.tsx <==
'use client';

import React from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';

export function MetricCardSkeleton() {
  return (
    <Card className="bg-gray-800 border-gray-700 shadow-md">
      <CardHeader className="relative z-10 flex flex-row items-start justify-between space-y-0 pb-3">
        <div className="space-y-1 w-3/4">

==> src/components/analytics/ChartComponents.tsx <==
'use client';

import React from 'react';
import type { ChartTooltipProps } from '@prisma/client';

export function CustomTooltip({ active, payload, label }: ChartTooltipProps) {
  if (active && payload?.length) {
    return (
      <div className="bg-gray-900 border border-gray-700 p-3 rounded-md shadow-lg">
        <p className="font-medium text-white text-sm mb-2">{label}</p>

==> src/components/analytics/WebVitalsTracker.tsx <==
/**
 * Web Vitals Tracker Component
 *
 * Client-side component that initializes Web Vitals monitoring
 * and tracks performance metrics throughout the application.
 */
'use client';

import { useEffect } from 'react';
import { initWebVitals, trackNavigationTiming } from '@/lib/analytics/web-vitals';

==> src/components/debug/CalProviderTest.tsx <==
'use client';

import React, { useEffect } from 'react';
import { useCalContext, useCalBooking } from '@/providers/CalProvider';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { CheckCircle, XCircle, Clock, AlertTriangle } from 'lucide-react';

export function CalProviderTest() {
  const { isInitialized, error, mode, retryInitialization } = useCalContext();

🔧 LIB:
==> src/lib/feature-flags.ts <==
/**
 * Feature flags implementation
 * 
 * This file provides environment-based feature flags for enabling/disabling features.
 * Feature flags allow for controlled rollout of new functionality and A/B testing.
 */

import { useState, useEffect } from 'react';
import { getEnvSafe } from '@/lib/utils/env';


==> src/lib/gallery.ts <==
'use client';

import { api } from '@/lib/api';
import type { TattooDesign } from '@prisma/client';

// Endpoint URLs
const ENDPOINTS = {
  TATTOOS: '/api/gallery/tattoos',
  VIDEOS: '/api/gallery/videos',
  TATTOO_ACTIONS: '/api/gallery/tattoos/actions',

==> src/lib/security/rate-limiter.ts <==
/**
 * Advanced Rate Limiting and Security Middleware
 * 
 * This file centralizes all rate limiting functionality using in-memory storage.
 * For production at scale, consider implementing a distributed cache solution.
 */
import { NextRequest } from 'next/server';
import { logger } from "@/lib/logger";

// Rate limit configurations

==> src/lib/auth/api-auth.ts <==
/**
 * API Authentication Utilities
 * 
 * Provides standardized authentication functions for API routes.
 */
import { headers } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { logger } from '@/lib/logger';
import { ApiErrors } from '@/lib/api-errors';

==> src/lib/trpc/routers/payments-router.ts <==
import { z } from 'zod';
import { TRPCError } from '@trpc/server';
import { router, adminProcedure } from '../procedures';
import { prisma } from '@/lib/db/prisma';
import { Prisma, PaymentStatus } from '@prisma/client';
// Types are imported directly from @prisma/client as needed
import { logger } from '@/lib/logger';

/**
 * Admin-only payment router for business intelligence and dashboard features.

==> src/lib/trpc/routers/gallery-router.ts <==
/**
 * Gallery Router
 *
 * This router handles all gallery-related API endpoints,
 * including retrieving tattoo designs and portfolio items.
 */
import { z } from 'zod';
import { logger } from '@/lib/logger';
import { publicProcedure, protectedProcedure, adminProcedure, router } from '../procedures';
import { TRPCError } from '@trpc/server';

==> src/lib/trpc/routers/admin/notes-router.ts <==
/**
 * Admin Notes Router
 *
 * This router handles all note-related admin operations,
 * including creating, updating, and retrieving customer notes.
 */
import { adminProcedure, router } from '../../procedures';
import { TRPCError } from '@trpc/server';
import { Prisma, NoteType } from '@prisma/client';
import { z } from 'zod';

==> src/lib/trpc/routers/admin/main-router.ts <==
/**
 * Admin Main Router
 *
 * This router aggregates all admin sub-routers into a single admin router.
 * It follows the same pattern as the dashboard router, providing a modular
 * and maintainable approach to organizing admin functionality.
 */
import { router } from '../../procedures';
import { adminNotesRouter } from './notes-router';
import { adminUsersRouter } from './users-router';

==> src/lib/trpc/routers/admin/users-router.ts <==
/**
 * Admin Users Router
 *
 * This router handles all user management operations for admin users,
 * including listing, creating, updating, and deleting users.
 */
import { z } from 'zod';
import { adminProcedure, router } from '../../procedures';
import { TRPCError } from '@trpc/server';
import { Prisma } from '@prisma/client';

==> src/lib/trpc/routers/admin/metrics-router.ts <==
/**
 * Admin Metrics Router
 *
 * This router handles all metrics and stats-related admin operations
 * for the dashboard and analytics features.
 */
import { z } from 'zod';
import { adminProcedure, router } from '../../procedures';
import { TRPCError } from '@trpc/server';
import { logger } from '@/lib/logger';

==> src/lib/trpc/routers/subscription-router.ts <==
/**
 * Subscription Router
 *
 * This router handles all real-time subscription endpoints using tRPC's
 * subscription feature with Server-Sent Events (SSE).
 * 
 * This implementation includes:
 * - Memory-safe EventManager with memory leak prevention
 * - Strong type safety and validation
 * - Proper error handling with structured logging

==> src/lib/trpc/routers/appointments-router.ts <==
/**
 * Cal.com-based Appointments Router
 * 
 * This router interfaces with Cal.com to manage appointments instead of
 * maintaining a separate appointment system. It maps Cal.com bookings
 * to our appointment interfaces for backward compatibility.
 */

import { z } from 'zod';
import { TRPCError } from '@trpc/server';

==> src/lib/trpc/routers/dashboard/activity-router.ts <==
/**
 * Dashboard Activity tRPC Router
 *
 * Provides type-safe procedures for activity tracking and notifications within the dashboard.
 * Split from dashboard-router.ts for better maintainability and organization.
 */

import { z } from 'zod';
import { logger } from '@/lib/logger';
import { router, publicProcedure, protectedProcedure, adminProcedure } from '@/lib/trpc/procedures';

==> src/lib/trpc/routers/dashboard/stats-router.ts <==
/**
 * Dashboard Stats tRPC Router
 *
 * Provides type-safe procedures for dashboard statistics and summary data.
 * Split from dashboard-router.ts for better maintainability and organization.
 */

import { router, publicProcedure } from '@/lib/trpc/procedures';
import { prisma } from '@/lib/db/prisma';
import { formatDateRange } from '@/lib/utils/date-format';

==> src/lib/trpc/routers/dashboard/appointments-router.ts <==
/**
 * Dashboard Appointments tRPC Router
 *
 * Provides type-safe procedures for appointment management within the dashboard.
 * Split from dashboard-router.ts for better maintainability and organization.
 */

import { z } from 'zod';
import { logger } from '@/lib/logger';
import { router, publicProcedure } from '@/lib/trpc/procedures';

==> src/lib/trpc/routers/dashboard/contacts-router.ts <==
/**
 * Dashboard Contacts tRPC Router
 *
 * Provides type-safe procedures for contact management within the dashboard.
 * Split from dashboard-router.ts for better maintainability and organization.
 */

import { z } from 'zod';
import { logger } from '@/lib/logger';
import { router, publicProcedure } from '@/lib/trpc/procedures';

==> src/lib/trpc/routers/cal-analytics-router.ts <==
/**
 * Cal.com Analytics tRPC Router
 * 
 * Purpose: Type-safe API endpoints for Cal.com analytics and dashboard data
 * Assumptions: Database available, analytics service configured
 * Dependencies: tRPC, Prisma, Cal.com analytics service, Zod validation
 * 
 * Trade-offs:
 * - Type safety vs development speed: Complete type coverage vs rapid iteration
 * - Comprehensive validation vs performance: Data integrity vs query speed

==> src/lib/trpc/routers/admin-router.ts <==
/**
 * Admin Router
 *
 * This router handles all admin-related API endpoints,
 * including dashboard data and user management.
 */
import { z } from 'zod';
import { adminProcedure, router } from '../procedures';
import { TRPCError } from '@trpc/server';
import { Prisma, NoteType } from '@prisma/client';

==> src/lib/trpc/routers/dashboard-router.ts <==
/**
 * Modern Dashboard tRPC Router
 *
 * Provides type-safe procedures for all dashboard-related data fetching and actions.
 * Modularized for better maintainability using domain-specific sub-routers.
 * 
 * This replaces the original 1012-line dashboard-router.ts with a cleaner,
 * React 19 compatible structure split across multiple focused routers.
 */


==> src/lib/trpc/routers/cal-router.ts <==
/**
 * Cal.com tRPC Router
 *
 * This router handles all Cal.com related operations through tRPC.
 */

import { z } from 'zod';
import { logger } from '@/lib/logger';
import { adminProcedure, protectedProcedure, publicProcedure, router } from '../procedures';
import {

==> src/lib/trpc/routers/settings-router.ts <==
/**
 * Settings Router - Refactored Version
 * 
 * This is a refactored version of the settings router that uses proper database persistence
 * via the SettingsService, providing better type safety, error handling, and maintainability.
 */

import { z } from 'zod';
import { router, protectedProcedure, adminProcedure } from '@/lib/trpc/procedures';
import { TRPCError } from '@trpc/server';

==> src/lib/trpc/procedures.ts <==
/**
 * tRPC Procedures
 *
 * This file contains procedures for server-only usage.
 * Should not be imported by client components.
 */

import { initTRPC, TRPCError } from '@trpc/server';
import superjson from 'superjson';
import { logger } from '@/lib/logger';

==> src/lib/trpc/context.ts <==
/**
 * TRPC Context Creation with Better Auth Authentication
 *
 * This file handles the creation of context for TRPC procedures.
 * The context includes access to the database via Prisma and user auth via Better Auth.
 *
 * THIS IS A SERVER-SIDE ONLY FILE
 */
import 'server-only';
import { NextRequest } from 'next/server';

==> src/lib/trpc/utils.ts <==
/**
 * tRPC Utility Functions
 * 
 * This file contains utility functions for tRPC that can be safely
 * imported from both client and server components without circular dependencies.
 */

/**
 * Helper function to get the base URL for API calls
 * This function works in both browser and server environments

==> src/lib/trpc/utils/error-handler.ts <==
/**
 * Error Handler Utility
 * 
 * Provides standardized error handling for tRPC procedures.
 * Ensures consistent error formatting, logging, and error codes.
 */
import { TRPCError } from '@trpc/server';
import { Prisma } from '@prisma/client';
import { logger } from '@/lib/logger';
// Validation error type for form/API validation

==> src/lib/trpc/utils/safe-zod.ts <==
/**
 * Safe Zod Utilities
 *
 * This file provides safe alternatives to Zod functionality that
 * may cause issues during build or in the Edge runtime.
 */

import * as z from 'zod';

// Check if we're in production build mode

==> src/lib/trpc/utils/router-error-handler.ts <==
/**
 * Router Error Handler
 * 
 * Standardized error handling for tRPC routers
 */
import { TRPCError } from '@trpc/server';
import { logger } from '@/lib/logger';
import { Prisma } from '@prisma/client';

export type RouterErrorContext = {

==> src/lib/trpc/api-router.ts <==
/**
 * tRPC API Router (CLIENT-SAFE VERSION)
 * 
 * IMPORTANT: This file exists to provide a safe way for client components
 * to import the AppRouter type without importing server-only code.
 * 
 * Why this exists:
 * 1. app-router.ts has the 'server-only' directive and cannot be imported in client components
 * 2. We need the AppRouter type in client components for tRPC type safety
 * 3. This file provides just the type definition without the server code

==> src/lib/trpc/client-provider.tsx <==
/**
 * tRPC Client Provider
 *
 * This file provides the React provider for tRPC client-side hooks.
 * It integrates with React Query and sets up the tRPC client.
 * 
 * IMPORTANT: This file imports the tRPC client from client.ts,
 * which is the single source of truth for tRPC client creation.
 */
'use client';

==> src/lib/trpc/client.ts <==
/**
 * tRPC Client
 * 
 * This file creates and exports the tRPC client for use in React components.
 * It imports the AppRouter type from api-router.ts, which is the client-safe
 * version that doesn't trigger server-only module errors.
 * 
 * For all tRPC-related types, import from '@/types/trpc-types.ts'
 * 
 * IMPORTANT: This is the single source of truth for tRPC client creation.

==> src/lib/trpc/app-router.ts <==
/**
 * tRPC App Router
 *
 * This file combines all the feature-specific routers into a single app router.
 * It serves as the main entry point for all tRPC procedures.
 *
 * THIS IS A SERVER-SIDE ONLY FILE
 */
import 'server-only';
import { router } from './procedures';

==> src/lib/trpc/server-action.ts <==
/**
 * tRPC Server Actions
 *
 * This file provides utilities for using tRPC procedures in Server Actions and
 * Server Components. It allows for type-safe API calls directly from the server.
 * 
 * IMPORTANT: All types have been moved to '@/types/trpc-types.ts'
 * Import types from there instead of from this file.
 */
import 'server-only';

==> src/lib/constants/booking-constants.ts <==
/**
 * Booking-related constants
 * Consolidated from VirtualizedBookingsList components
 */

export const BOOKING_STATUS_COLORS = {
  pending: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  confirmed: 'bg-green-100 text-green-800 border-green-200',
  cancelled: 'bg-red-100 text-red-800 border-red-200',
  completed: 'bg-blue-100 text-blue-800 border-blue-200',

==> src/lib/gallery/types.ts <==
// Gallery-related types
// These types represent the gallery feature's data structures

import type { Prisma } from '@prisma/client';

// Use Prisma's generated type with selected fields
export type GalleryDesign = Prisma.TattooDesignGetPayload<{
  include: {
    artist: {
      include: {

==> src/lib/gallery/isr-helpers.ts <==
/**
 * ISR (Incremental Static Regeneration) Helpers for Gallery
 *
 * Optimized data fetching and caching strategies for gallery pages
 * to maximize performance while ensuring fresh content.
 */
import { cache } from 'react';
import { prisma } from '@/lib/db/prisma';
import type { TattooDesign, Artist, User } from '@prisma/client';


==> src/lib/toast/toast.ts <==
/**
 * Enhanced toast utilities for better user notifications
 */

import { toast } from '@/hooks/use-toast';
// Toast variant type
type ToastVariant = 'default' | 'success' | 'error' | 'destructive' | 'warning' | 'info';

// Define our own ToastActionElement type to match the expected structure
type ToastActionElement = {

==> src/lib/utils.ts <==
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

==> src/lib/utils/image.ts <==
/**
 * Image utility functions for optimized loading
 */

/**
 * Generates a tiny, blurred placeholder image as a data URL
 * @param color Hex color code for the placeholder
 * @returns Base64 encoded data URL of a 10x10 SVG
 */
export function getColorPlaceholder(color: string = '#000000'): string {

==> src/lib/utils/prisma-helper.ts <==
/**
 * Prisma helper utility functions
 * For handling TypeScript strict mode compatibility with Prisma
 */

/**
 * Converts undefined values to null for Prisma data objects
 * to avoid issues with exactOptionalPropertyTypes
 */
/**

==> src/lib/utils/file-validation.ts <==
/**
 * File Validation Utilities
 * 
 * Provides utilities for validating files in upload handlers.
 */
import { logger } from '../logger';
import { ApiErrors } from '../api-errors';

// Define allowed file types
export const ALLOWED_IMAGE_TYPES = [

==> src/lib/utils/common.ts <==
// CONVERTED TO SERVER COMPONENT: Pure utility functions for data manipulation

/**
 * Safely access nested object properties
 */
export function get<T, K extends keyof T>(obj: T | null | undefined, key: K): T[K] | null {
  return obj ? obj[key] : null;
}

/**

==> src/lib/utils/browser/device-detection.ts <==
'use client';

/**
 * Get the user agent string
 */
export function getUserAgent(): string {
  return typeof window !== 'undefined' ? window.navigator.userAgent : '';
}

/**

==> src/lib/utils/styling.ts <==
import { clsx, type ClassValue } from 'clsx';

// CONVERTED TO SERVER COMPONENT: Pure utility functions for CSS classes
import { twMerge } from 'tailwind-merge';

/**
 * Utility function for combining TailwindCSS classes conditionally
 * Enhanced for Tailwind CSS v4 compatibility.
 */
export function cn(...inputs: ClassValue[]) {

==> src/lib/utils/security.ts <==
/**
 * Security utilities for safe HTML content injection
 */

/**
 * Safely serialize JSON for script injection to prevent XSS attacks
 * This function escapes potentially dangerous characters in JSON strings
 *
 * @param data - The data to serialize
 * @returns Escaped JSON string safe for script injection

==> src/lib/utils/env.ts <==
/**
 * Environment variable access helper
 * 
 * This utility provides type-safe access to environment variables
 * and fixes TypeScript TS4111 index signature access errors.
 */

import { z } from 'zod';

import { logger } from "@/lib/logger";

==> src/lib/utils/date-format.ts <==
/**
 * Date utility functions for formatting and manipulating dates
 */

/**
 * Format a date range based on period
 */
export function formatDateRange(period: string): { startDate: Date; endDate: Date } {
  const now = new Date();


==> src/lib/utils/server.ts <==
/**
 * Server-only utilities
 * Do not import this file in client components
 */

import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { auth } from '@/lib/auth';
import { cookies } from 'next/headers';
import { type User, UserRole } from '@prisma/client';

==> src/lib/utils/customer-utils.ts <==
/**
 * Shared customer utility functions
 * Consolidated from multiple customer management components
 */

import { formatCurrency } from './date-format';

interface CustomerData {
  firstName?: string | null;
  lastName?: string | null;

==> src/lib/api.ts <==
/**
 * Unified API client for making standardized requests
 *
 * This module provides a consistent API client for making HTTP requests
 * with consistent error handling, validation, and response parsing.
 */

import { z } from 'zod';
// API types for standardized responses and requests
type ApiResponse<T = unknown> = {

==> src/lib/schemas/note-schemas.ts <==
import { z } from 'zod';
import { NoteType } from '@prisma/client';

export const GetNotesByCustomerSchema = z.object({
  customerId: z.string(),
  limit: z.number().min(1).max(100).default(20),
  cursor: z.string().optional(),
  type: z.enum(['all', 'MANUAL', 'SYSTEM', 'APPOINTMENT', 'BOOKING', 'PAYMENT', 'INTERACTION', 'FOLLOW_UP']).default('all'),
  pinnedOnly: z.boolean().default(false),
});

==> src/lib/cal/api.ts <==
/**
 * Cal.com API Client - Comprehensive Integration
 * 
 * Consolidated Cal.com API client supporting both v1 and v2 endpoints
 * with comprehensive error handling, retry logic, and type safety.
 */

import { z } from 'zod';
import { createHmac, timingSafeEqual } from 'crypto';
import type { Prisma, CalBooking, CalEventType } from '@prisma/client';

==> src/lib/cal/email-integration.ts <==
/**
 * Cal.com Email Integration
 * This module handles sending automated emails for Cal.com booking events
 *
 * Email templates are currently disabled
 */

import type { CalBookingPayload } from '@prisma/client';

import { logger } from "@/lib/logger";

==> src/lib/cal/config.ts <==
/**
 * Cal.com API Integration
 * 
 * Production-ready implementation that handles:
 * - API authentication with OAuth 2.0
 * - Service configuration and availability
 * - Webhook processing for real-time updates
 * - Comprehensive error handling and logging
 * 
 * @module lib/cal/config

==> src/lib/supabase/middleware.ts <==
import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';
import { ENV } from '@/lib/env-validation';
// Cookie types for Supabase middleware
type CookieOptions = {
  maxAge?: number;
  path?: string;
  domain?: string;
  secure?: boolean;
  httpOnly?: boolean;

==> src/lib/supabase/client.ts <==
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/database.types';
import { getRequiredEnvVar } from '@/lib/utils/env';

// Get required environment variables for Supabase client
const supabaseUrl = getRequiredEnvVar('NEXT_PUBLIC_SUPABASE_URL');
const supabaseAnonKey = getRequiredEnvVar('NEXT_PUBLIC_SUPABASE_ANON_KEY');

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

==> src/lib/supabase/upload.ts <==
import { logger } from "@/lib/logger";
export interface UploadResult {
  url: string;
  path: string;
  error?: string;
}

export async function uploadFile(
  file: File,
  bucket: string = 'gallery',

==> src/lib/supabase/server.ts <==
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { getRequiredEnvVar } from '@/lib/utils/env';
// Cookie types for Supabase SSR
type CookieOptions = {
  maxAge?: number;
  path?: string;
  domain?: string;
  secure?: boolean;
  httpOnly?: boolean;

==> src/lib/supabase/storage-client.ts <==
import { createClient } from '@supabase/supabase-js';
import { getRequiredEnvVar } from '@/lib/utils/env';

// Get required environment variables for Supabase storage client
const SUPABASE_URL = getRequiredEnvVar('NEXT_PUBLIC_SUPABASE_URL');
const SUPABASE_ANON_KEY = getRequiredEnvVar('NEXT_PUBLIC_SUPABASE_ANON_KEY');

// Supabase client for storage only
export const supabaseStorage = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {

==> src/lib/validation-schemas.ts <==
/**
 * Consolidated Validations
 *
 * This file consolidates all validation schemas and utilities that are actually used.
 * Cleaned up from 13 separate files to remove redundancy and unused code.
 */

import { z } from 'zod';
import { NextRequest, NextResponse } from 'next/server';


==> src/lib/dashboard/types.ts <==
// Dashboard-related types
// Types for dashboard statistics and analytics

export interface DashboardStatsResponse {
  appointments: {
    total: number;
    upcoming: number;
    completed: number;
    inPeriod: number;
    change: number;

==> src/lib/logger.ts <==
/**
 * Unified Logger
 *
 * This file provides a consistent logging interface that works across
 * both client and server environments.
 */

type LogMessage = string;
type LogData = unknown;


==> src/lib/api-errors.ts <==
/**
 * API Error Handling
 *
 * Defines standardized API error types and handlers for the application.
 * This allows for consistent error responses and client-side handling.
 */

import { TRPCError } from '@trpc/server';
import { toast } from 'sonner';
import { logger } from './logger';

==> src/lib/prisma-types.ts <==
/**
 * PRISMA-FIRST TYPE SYSTEM
 * Single Source of Truth for all application types
 * 
 * CRITICAL: All types in this application MUST derive from Prisma schema
 * NO manual type definitions are allowed elsewhere
 */

// ============================================================================
// PRISMA NAMESPACE IMPORT (Cleaner approach)

==> src/lib/pwa/offline-manager.ts <==
/**
 * Enhanced Offline Management for PWA
 *
 * Provides sophisticated offline functionality with background sync,
 * intelligent caching, and seamless online/offline transitions.
 */
'use client';

import { logger } from "@/lib/logger";


==> src/lib/actions/contact-actions.ts <==
'use server';

import { revalidateTag } from 'next/cache';
import { contactFormSchema } from '@/lib/validation-schemas';
import { prisma } from '@/lib/db/prisma';
import { sendEmail, generateAdminContactEmail, generateCustomerContactConfirmation } from '@/lib/email/email-service';
import { sanitizeForPrisma } from '@/lib/utils/prisma-helper';
import { ENV } from '@/lib/utils/env';
import { checkRateLimit } from '@/lib/security/rate-limiter';
import { headers } from 'next/headers';

==> src/lib/db/prisma.ts <==
/**
 * Prisma client singleton
 * 
 * This file ensures that there's only a single Prisma Client instance in the app,
 * even during hot reloading in development.
 */
import { PrismaClient } from '@prisma/client';
import { logger } from '../logger';

// Create a global variable to store the client

==> src/lib/db/db-execute.ts <==
/**
 * Database Function Execution
 *
 * This file provides a unified interface for executing database functions.
 * It abstracts away the details of how functions are executed (Prisma, Supabase, etc.)
 */

import { prisma } from './prisma';
import { getErrorMessage } from '@/lib/utils/server';


==> src/lib/db/build-safe-prisma.ts <==
/**
 * Build-safe Prisma utilities for static generation
 * Handles database connection timeouts and fallbacks during build time
 */

import { prisma } from './prisma';

import { logger } from "@/lib/logger";
export interface BuildSafeQueryOptions<T = unknown> {
  timeout?: number;

==> src/lib/db/db-pricing.ts <==
/**
 * Pricing Database Functions
 *
 * Unified functions for pricing-related operations
 */

import { executeStoredProcedure } from './prisma';
import type { PricingBreakdown, StandardPricingData, ArtistRate } from '@prisma/client';

import { logger } from "@/lib/logger";

==> src/lib/db/db-appointments.ts <==
/**
 * Appointment Database Functions
 *
 * Unified functions for appointment-related operations using Prisma
 */

import { prisma } from './prisma';
import type { Prisma } from '@prisma/client';

// Appointment create input using Prisma.GetPayload

==> src/lib/db/functions.ts <==
/**
 * Production-ready database functions
 * Using direct Prisma queries for tattoo-website project
 */

import { prisma } from './prisma';
import { AppointmentStatus } from '@prisma/client';
import { addHours, parseISO } from 'date-fns';

import { logger } from "@/lib/logger";

==> src/lib/prisma-client.ts <==
import { PrismaClient } from '@prisma/client'

declare global {
  var prisma: PrismaClient | undefined
}

const prisma = globalThis.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') {
  globalThis.prisma = prisma

==> src/lib/rate-limit.ts <==
/**
 * This file is kept for backward compatibility
 * The rate limiting logic has been consolidated in src/lib/security/rate-limiter.ts
 */

export { 
  rateLimit,
  rateLimitResponse
} from '@/lib/security/rate-limiter';

==> src/lib/seo/seo-config.ts <==
/**
 * SEO Configuration for Ink 37 Tattoos
 * 
 * Centralized SEO configuration for consistent metadata across the application.
 * Optimized for local tattoo business SEO and Google discoverability.
 */

import type { Metadata } from 'next';
import { ENV } from '@/lib/utils/env';


==> src/lib/error/error-handler.ts <==
'use client';

import { logger } from '@/lib/logger';
import { TRPCClientError } from '@trpc/client';
import { ZodError } from 'zod';
import { toast } from '@/hooks/use-toast';
import { ErrorContext } from 'better-auth/react';
import { ErrorCategory, ErrorSeverity } from '@prisma/client';

/**

==> src/lib/pricing/types.ts <==
// Pricing-related types for the application
// These are business logic types, not database entities

export interface PricingBreakdown {
  baseHourlyRate: number;
  estimatedHours: number;
  sizeFactor: number;
  placementFactor: number;
  complexityFactor: number;
  totalPrice: number;

==> src/lib/db.ts <==
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;


==> src/lib/email/email-service.ts <==
/**
 * Consolidated Email Service
 *
 * Comprehensive email service for the application.
 * Includes core sending functionality and templates.
 * Booking-related emails are handled by Cal.com.
 */

import { Resend } from 'resend';
import { ENV, getEnvSafe } from '@/lib/utils/env';

==> src/lib/email/types.ts <==
// Email service types
// Types specific to email functionality

export interface EmailTemplate {
  subject: string;
  html: string;
  text?: string;
}

export interface EmailSendOptions {

==> src/lib/email/auth-emails.ts <==
/**
 * Better Auth Email Functions
 * 
 * Email functions specifically for Better Auth integration
 * Handles verification emails and password reset emails
 */

import { sendEmail } from './email-service';

/**

==> src/lib/services/settings-service.ts <==
/**
 * Settings Service
 * 
 * Centralized service for managing application settings with proper persistence,
 * type safety, and audit trail functionality.
 */

import { prisma } from '@/lib/db/prisma';
import { logger } from '@/lib/logger';
import { revalidateTag } from 'next/cache';

==> src/lib/auth.ts <==
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { admin } from "better-auth/plugins";
import { prisma } from "./db/prisma";

export const auth = betterAuth({
appName: "Ink 37 Tattoos",
secret: process.env['BETTER_AUTH_SECRET'] ?? (() => {
  if (process.env.NODE_ENV === 'production') {
    throw new Error('BETTER_AUTH_SECRET environment variable is required in production');

==> src/lib/validation/customer-validation.ts <==
/**
 * Shared customer validation utilities
 * Consolidated from CustomersInfinite, CustomersModern, and CustomersOptimistic
 */

import { toast } from 'sonner';

export interface CustomerInput {
  firstName: string;
  lastName: string;

==> src/lib/auth-client.ts <==
'use client';

import { createAuthClient } from "better-auth/react";
import { adminClient } from "better-auth/client/plugins";

// Create auth client exactly as per Better Auth documentation
export const authClient = createAuthClient({
  baseURL: typeof window !== 'undefined' 
    ? window.location.origin 
    : (process.env.NODE_ENV === "production" 

==> src/lib/analytics/tracking.ts <==
// Google Analytics tracking utilities
// Use these functions throughout the app to track user interactions
import { ENV } from '@/lib/utils/env';

import { logger } from "@/lib/logger";
// Get GA measurement ID from environment
const getGAMeasurementId = (): string | null => {
  if (typeof window !== 'undefined') {
    return ENV.NEXT_PUBLIC_GA_MEASUREMENT_ID ?? null;
  }

==> src/lib/analytics/batch-processor.ts <==
/**
 * Analytics Batch Processor
 * Batches analytics events for improved performance and reduced database load
 */

import { logger } from "@/lib/logger";
// Local types for analytics processing
interface ProcessedAnalyticsEvent {
sessionId: string;
eventType: string;

==> src/lib/analytics/gdpr-compliance.ts <==
/**
 * GDPR Compliance for Analytics System
 * Implements data privacy features including anonymization, data subject rights, and consent management
 */

import { z } from 'zod';
import { securityConfig } from './config';
import { DataSubjectRequestType, RequestStatus } from '@/types/gdpr-types';
// ProcessedAnalyticsEvent type defined locally where needed


==> src/lib/analytics/web-vitals.ts <==
/**
 * Web Vitals Performance Monitoring
 *
 * Comprehensive performance tracking with Core Web Vitals,
 * custom metrics, and real-time monitoring capabilities.
 */
'use client';

// Remove unused web-vitals import
// import { onCLS, onFCP, onINP, onLCP, onTTFB, type Metric } from 'web-vitals';

==> src/lib/analytics/retry-wrapper.ts <==
/**
 * Retry wrapper for analytics operations
 * Provides resilient error handling for analytics failures
 */

// Define AnalyticsError locally
interface AnalyticsError extends Error {
code?: string;
retryable?: boolean;
}

==> src/lib/analytics/cal-analytics.ts <==
/**
 * Cal.com Analytics Service
 * Comprehensive analytics tracking for Cal.com Atoms integration
 */

import { prisma as db } from '@/lib/db/prisma';
import { logger } from "@/lib/logger";
import type { 
  CalBookingFunnel,
  CalServiceAnalytics

==> src/lib/analytics/rate-limiter.ts <==
/**
 * Rate Limiting for Analytics API
 * Implements sliding window rate limiting with IP-based tracking
 */

import { TRPCError } from '@trpc/server';
import { rateLimitConfig } from './config';
import type { NextRequest } from 'next/server';

interface RateLimitEntry {

==> src/lib/analytics/health-monitor.ts <==
/**
 * Analytics Health Check System
 * Monit    this.isRunning = true;
    this.scheduleHealthCheck();
    // Health monitoring started the health and performance of the analytics system
 */

import { getBatchProcessor } from './batch-processor';
import { CalAnalyticsService } from './cal-analytics';
import { monitoringConfig } from './config';

==> src/lib/analytics/cache.ts <==
import { logger } from "@/lib/logger";
/**
 * Analytics Caching Layer
 * Implements intelligent caching for frequently accessed analytics data
 */

export interface CacheEntry<T = unknown> {
  data: T;
  timestamp: number;
  hits: number;

==> src/lib/analytics/cal-analytics-service.ts <==
/**
 * Cal.com Analytics Service
 * 
 * Purpose: Synchronize Cal.com data and provide real-time analytics
 * Assumptions: Database connection available, Cal.com API accessible
 * Dependencies: Prisma for database, Cal.com API client, real-time publisher
 * 
 * Trade-offs:
 * - Batch processing vs real-time updates: Performance vs latency
 * - Data denormalization for query performance vs storage overhead

==> src/lib/analytics/security.ts <==
/**
 * Security Utilities for Analytics
 * Handles encryption, access control, and security validation
 */

import { createHash, randomBytes, createCipheriv, createDecipheriv } from 'crypto';
import { logger } from "@/lib/logger";

export interface SecurityConfig {
  encryptionKey?: string;

==> src/lib/analytics/config.ts <==
/**
 * Analytics Configuration
 * Central configuration for the Cal.com Analytics system
 */

// Analytics configuration type
type AnalyticsConfig = {
  batchSize: number;
  flushInterval: number;
  maxRetries: number;

==> src/lib/analytics/data-retention.ts <==
/**
 * Data Retention and GDPR Compliance Management
 * 
 * Production-ready implementation for automated data lifecycle management:
 * - Enforces configurable retention policies for different data categories
 * - Implements efficient chunked deletion to prevent database performance impact
 * - Supports admin monitoring and manual policy adjustments
 * - Provides impact analysis before executing cleanup operations
 * - Uses cron scheduling for reliable background execution
 * 

🎣 HOOKS:
==> src/hooks/use-mobile.tsx <==
'use client';

import { useState, useEffect } from 'react';

export function useMobile() {
  const [isMobile, setIsMobile] = useState<boolean | undefined>(undefined);

  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);

==> src/hooks/use-cal-analytics.ts <==
'use client';

import { useState } from 'react';
import { trpc } from '@/lib/trpc/client';
import { logger } from '@/lib/logger';
import type { DashboardPeriod, DateRange } from '@prisma/client';

export function useCalAnalytics(defaultPeriod: DashboardPeriod = 'week') {
  const [selectedPeriod, setSelectedPeriod] = useState<DashboardPeriod>(defaultPeriod);
  

==> src/hooks/use-auth.ts <==
'use client';

import { useAuthState, signOut } from '@/lib/auth-client';
import { useRouter } from 'next/navigation';
import { useCallback } from 'react';

import { logger } from "@/lib/logger";
export function useAuth() {
  const authState = useAuthState();
  const router = useRouter();

==> src/hooks/use-sidebar-settings.ts <==
'use client';

import { useState, useEffect } from 'react';
import { logger } from "@/lib/logger";

interface SidebarSettings {
  isFixed: boolean;
  defaultOpen: boolean;
}


==> src/hooks/use-core.ts <==
'use client';

/**
 * Core React Hooks
 * 
 * Re-exports from specialized hook files for backward compatibility
 */

// Re-export memoization utilities
export {

==> src/hooks/use-utils.ts <==
'use client';

import { logger } from "@/lib/logger";

/**
 * Utility Hooks and Helper Functions
 * 
 * Production-ready utility functions for React hooks:
 * - Error handling utilities
 * - String handling utilities

==> src/hooks/use-design.ts <==
'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import { trpc } from '@/lib/trpc/client';
import type { GalleryDesign } from '@prisma/client';

function preloadImage(url: string): void {
  if (typeof window === 'undefined') return;
  
  const img = new Image();

==> src/hooks/use-contact-form.ts <==
'use client';

declare global {
  interface Window {
    gtag: (
      command: 'event',
      action: string,
      params?: {
        event_category?: string;
        event_label?: string;

==> src/hooks/use-memo.ts <==
'use client';

/**
 * Memoization Utilities
 * 
 * Production-ready implementation of React hooks for memoization:
 * - Simple memoization wrappers for React's built-in memo functions
 * - Enhanced stable references with deep equality comparisons
 * - Optimized component memoization with debugging support
 */

==> src/hooks/use-metrics.ts <==
'use client';

import { useMemo, useCallback } from 'react';
import { trpc } from '@/lib/trpc/client';
import type { DashboardStatsResponse, DatabasePayment } from '@prisma/client';

import { logger } from "@/lib/logger";
// Types
export interface DateRange {
  startDate: Date;

==> src/hooks/use-toast.ts <==
/**
 * Simple toast hook using sonner
 */
import { toast as sonnerToast } from 'sonner';

export interface ToastOptions {
  title?: string;
  description?: string;
  variant?: 'default' | 'destructive' | 'success' | 'warning' | 'info' | 'error';
  duration?: number;

==> src/hooks/use-dashboard-metrics.ts <==
/**
 * Re-export of dashboard metrics hooks from consolidated use-metrics.ts
 */

export type { 
  DateRange,
  MetricsPeriod,
  UseDashboardMetricsReturn 
} from './use-metrics';


==> src/hooks/use-memoization.ts <==
'use client';

/**
 * Re-export from specialized hooks for backward compatibility
 */

// Re-export memoization utilities
export {
  memoizeComponent,
  useMemoizedCallback,

==> src/hooks/use-gallery.ts <==
/**
 * Consolidated gallery hooks for image gallery management
 * Combines functionality from the previous separate hook files
 */

'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { toast } from '@/hooks/use-toast';
import { api } from '@/lib/trpc/client';

==> src/hooks/use-cal.ts <==
/**
 * Consolidated Cal.com hooks for analytics and bookings
 */

'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { toast } from '@/hooks/use-toast';
import { api } from '@/lib/trpc/client';
import { logger } from "@/lib/logger";

==> src/hooks/use-conditional-data.ts <==
'use client';

/**
 * Conditional Data Loading Hooks
 * 
 * Production-ready implementation of React hooks for conditional data fetching:
 * - Conditionally load dashboard statistics
 * - Conditionally load customer data
 * - Conditionally load appointments with pagination
 */

==> src/hooks/use-callback-utils.ts <==
'use client';

import * as React from 'react';
import { useCallback, useRef, useEffect } from 'react';
// Utility type for any function parameters
type AnyParams = unknown[];
import { logger } from "@/lib/logger";
// Removed unused ApiError import

export function useDebouncedCallback<T extends (...args: AnyParams) => unknown>(

==> src/hooks/use-realtime.ts <==
'use client';

/**
 * Consolidated real-time hooks for dashboard updates
 * 
 * Provides hooks for:
 * - Server-sent events stream management
 * - Dashboard updates and notifications
 * - Data polling with configurable intervals
 * - Real-time data transformation

==> src/hooks/use-realtime-modern.ts <==
'use client';

import { useMemo, useCallback, useRef, startTransition, useState, useEffect } from 'react';
import { toast } from '@/components/ui/use-toast';

import { logger } from "@/lib/logger";
// Real-time update types
export interface RealtimeUpdate {
  type: 'booking' | 'appointment' | 'customer' | 'payment' | 'analytics';
  action: 'created' | 'updated' | 'deleted' | 'status_changed';

==> src/hooks/use-trpc-infinite-query.ts <==
'use client';

/**
 * Re-export from consolidated hooks for backward compatibility
 */

export {
  useTRPCInfiniteQuery,
  useGalleryInfiniteQuery,
  useBookingsInfiniteQuery,

==> src/hooks/use-query.ts <==
'use client';

/**
 * Consolidated Query Hooks
 * 
 * This file provides unified hooks for data fetching, including:
 * - Infinite queries
 * - TRPC integration
 * - Specialized domain queries
 */

📦 TYPES:
==> src/types/data-table-types.ts <==
/**
 * Data Table Types
 * Types for the admin data table component
 */

import type { ReactNode } from 'react';

// Generic record object type
export type RecordObject = Record<string, undefined>;


==> src/types/app-types.ts <==
/**
 * Core types for the application
 * Only types that are NOT generated by Prisma should be here
 * All database models and enums come from @prisma/client
 */

// ============================================================================
// API Request/Response Types (not database entities)
// ============================================================================


==> src/types/trpc-types.ts <==
import type { inferRouterInputs, inferRouterOutputs, TRPCError } from '@trpc/server';
import type { AppRouter } from '@/lib/trpc/api-router';
import type { PrismaClient } from '@prisma/client';

export type RouterInputs = inferRouterInputs<AppRouter>;
export type RouterOutputs = inferRouterOutputs<AppRouter>;

export type GalleryRouter = RouterOutputs['gallery'];
export type GalleryInputs = RouterInputs['gallery'];


==> src/types/component-props.ts <==
/**
 * Component prop types
 * Only props for components that can't use inline definitions
 * Database entities should come from @prisma/client
 */

import type { LucideIcon } from 'lucide-react';

// Reusable base props
export interface BaseComponentProps {

==> src/types/gdpr-types.ts <==
/**
 * GDPR and Analytics Types
 * These are application-level types, not database entities
 */

export enum DataSubjectRequestType {
  ACCESS = 'access',
  RECTIFICATION = 'rectification',
  ERASURE = 'erasure',
  PORTABILITY = 'portability',

==> src/types/error-types.ts <==
/**
 * Error handling types and enums
 * These are application-level types, not database entities
 */

export enum ErrorCategory {
VALIDATION = 'validation',
NETWORK = 'network',
AUTHENTICATION = 'authentication',
AUTHORIZATION = 'authorization',

⚙️ UTILS:

🌐 PROVIDERS:
/**
 * Cal.com Provider - Defensive Implementation
 * 
 * Purpose: Global Cal.com provider with robust error handling
 * Approach: Graceful degradation when Cal.com embed fails
 * Fallback: Direct booking links always work
 */

'use client';


💾 DATA/CONFIG:
import { Palette, Camera, Gem, RefreshCw } from 'lucide-react';
// Service type for tattoo services data
type Service = {
  id: string;
  title: string;
  description: string;
  shortDescription: string;
  features: string[];
  icon: React.ComponentType<{ className?: string }>;
  startingPrice: number;
